

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>winnie's Tech Blog</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing. 생각하라, 질문하라, 공부하</subtitle>
  <updated>2024-10-19T14:37:26+08:00</updated>
  <author>
    <name>winnie</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator>
  <rights> © 2024 winnie </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>티켓팅 시스템 - 대기열 구현</title>
    <link href="http://localhost:4000/posts/kboticket-%EB%8C%80%EA%B8%B0%EC%97%B4/" rel="alternate" type="text/html" title="티켓팅 시스템 - 대기열 구현" />
    <published>2024-10-08T00:00:00+08:00</published>
  
    <updated>2024-10-15T12:42:38+08:00</updated>
  
    <id>http://localhost:4000/posts/kboticket-%EB%8C%80%EA%B8%B0%EC%97%B4/</id>
    <content src="http://localhost:4000/posts/kboticket-%EB%8C%80%EA%B8%B0%EC%97%B4/" />
    <author>
      <name>winnie</name>
    </author>

  
    
    <category term="kboticket" />
    
  

  <summary>이 시스템은 트래픽이 몰리는 경우를 가정한다.

구현


  (수천 명의 동시 요청) 대용량 트래픽이 몰리는 경우
  순번 조회 가능


SQS, RabbitMQ, Kafka와 같은 큐 서비스의 장단점 확인 후 적합성 판단.



SQS
장점

  AWS에서 관리되는 서비스로 운영 부담이 적다.
  높은 가용성과 내구성을 보장하며, AWS 생태계와 통합이 용이하다.
    단점
  
  메시지 큐잉에 최적화되어 있어 실시간 데이터 스트리밍에 부적합하다.
  초당 수백만 개의 메시지 처리에느 한계가 있을 수 있다.


적합성

  SQS는 간단한 메시지 큐잉에 적합하지만, 대규모 트래픽을 처리하기에는 한계가 있다.




RabbitMQ
장점

  다양한 라우팅 옵션과 기능을 제공한다.(우선순위, TTL...</summary>

  </entry>

  
  <entry>
    <title>CreatedDate, LastModifiedDate 이슈</title>
    <link href="http://localhost:4000/posts/31cm-date/" rel="alternate" type="text/html" title="CreatedDate, LastModifiedDate 이슈" />
    <published>2024-10-08T00:00:00+08:00</published>
  
    <updated>2024-10-08T00:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/31cm-date/</id>
    <content src="http://localhost:4000/posts/31cm-date/" />
    <author>
      <name>winnie</name>
    </author>

  
    
    <category term="shop31cm" />
    
  

  <summary>문제
사용자 회원가입시 createdDate, ModifiedDate 값이 제대로 들어가지 않는 이슈가 있었다.



원인
@CreatedDate와 @LastModifiedDate를 사용하였는데,
위의 어노테이션을 사용할 때는

@EnableJpaAuditing, @EntityListeners 이 두 어노테이션을 이용해 기능을 활성화 해야 하는데
이 부분을 빠트렸다.



해결
Application 실행 부분에 @EnableJpaAuditing을 추가하여 
Auditing 기능을 활성화 한다.
@EnableJpaAuditing
@SpringBootApplication
public class Shop31cmApplication {

	public static void main(String[] args) ...</summary>

  </entry>

  
  <entry>
    <title>티켓팅 시스템 - 좌석 선점</title>
    <link href="http://localhost:4000/posts/kboticket-%EC%A2%8C%EC%84%9D%EC%84%A0%EC%A0%90/" rel="alternate" type="text/html" title="티켓팅 시스템 - 좌석 선점" />
    <published>2024-10-07T00:00:00+08:00</published>
  
    <updated>2024-10-07T00:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/kboticket-%EC%A2%8C%EC%84%9D%EC%84%A0%EC%A0%90/</id>
    <content src="http://localhost:4000/posts/kboticket-%EC%A2%8C%EC%84%9D%EC%84%A0%EC%A0%90/" />
    <author>
      <name>winnie</name>
    </author>

  
    
    <category term="kboticket" />
    
  

  <summary>기존의 이커머스 시스템은 결제 요청 직전에 재고 확인 후 락을 걸고 결제를 진행하다고 알고 있다.
최대한 락을 짧게 잡는다.(아닌 경우 알려주세묩..!)

하자만 티켓 예매의 경우 좌석을 잡고 있는 시간이 존재한다.
7분 가량 좌석을 잡고 있을 수 있으며, 그 시간 이내에 결제를 완료해야 한다.

두 시스템의 차이는 핵심 비즈니스 로직과 트랜잭션 처리에 대한 우선순위가 달라서 라고 생각한다.




티켓팅 시스템과 이커머스 시스템

티켓팅 시스템
좌석은 고유한 자원으로, 하나의 좌석에 대해 한 명의 유저만 선택할 수 있어야 한다.

만약 하나의 자원에 대해 여러 사람이 동시에 선택이 가능하게 되면 중복 예매가 되거나 계속되는 결제 실패로 
유저의 불편함이 증가할 것이다.

따라서 좌석은 한 번 선점되면...</summary>

  </entry>

  
  <entry>
    <title>GC(Garbage Collection)란?</title>
    <link href="http://localhost:4000/posts/java-gc/" rel="alternate" type="text/html" title="GC(Garbage Collection)란?" />
    <published>2024-10-05T00:00:00+08:00</published>
  
    <updated>2024-10-15T12:29:00+08:00</updated>
  
    <id>http://localhost:4000/posts/java-gc/</id>
    <content src="http://localhost:4000/posts/java-gc/" />
    <author>
      <name>winnie</name>
    </author>

  
    
    <category term="Java" />
    
  

  <summary>자바에서 자동으로 메모리를 관리하는 기능이다.

사용하지 않는 객체들을 자동으로 메모리에서 제거하여 메모리 누수를 방지한다.

개발자가 메모리를 직접 관리할 필요가 없으며, 메모리 누수와 이중 해제 등 메모리 관련 버그를 줄여 프로그램의 안정성을 높이며, 메모리 공간을 효율적으로 사용할 수 있도록 한다.



GC의 대상
도달성(Reachability)을 통해 가비지의 대상이 되는지 판단한다.


  Reachable : 객체가 참조되고 있는 상태
  Unreachable : 객체가 참조되고 있지 않은 상태로 GC의 대상이다.


객체들은 실제로 Heap 영역에 생성되고, 스태틱(메서드) 영역과 스택 영역에서는 생성된 객체의 주소를 참조하는 형식이다.

Heap 영역 객체의 참조 변수가 삭제되는 현상이...</summary>

  </entry>

  
  <entry>
    <title>JIT 컴파일러?</title>
    <link href="http://localhost:4000/posts/java-jit-compiler/" rel="alternate" type="text/html" title="JIT 컴파일러?" />
    <published>2024-10-01T00:00:00+08:00</published>
  
    <updated>2024-10-01T00:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/java-jit-compiler/</id>
    <content src="http://localhost:4000/posts/java-jit-compiler/" />
    <author>
      <name>winnie</name>
    </author>

  
    
    <category term="Java" />
    
  

  <summary>자바 파일(.java)을 컴파일러를 통해 클래스 파일(.class/바이트코드)로 만든다.
  이후 자바 바이트 코드를 JVM이 읽고 실행한다.



  자바 바이트 코드
  JVM이 이해할 수 있는 언어로 변화나된 자바 소스 코드
자바 컴파일러에 의해 변환되는 코드의 명령어 크기가 1 바이트여서 자바 바이트 코드라 한다.
자바 바이트 코드는 자바 가상 머신만 설치되어 있으면, 어떤 운영체제에서도 실행될 수 있다.




컴파일러와 인터프리터
컴파일러와 인터프리터 모두 고수준 언어를 기계어로 변환시킨다.

컴파일러는 소스코드 전체를 한 번에 번역하여 목적 파일로 만들어 메모리에 적재하는 방식이다.
인터프리터는 소스코드를 한 행씩 중간 코드로 번역 후 실행한다.

컴파일러

  컴파일이 완료된 실행 파일은...</summary>

  </entry>

</feed>


