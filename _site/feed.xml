

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>winnie's Tech Blog</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing. 생각하라, 질문하라, 공부하</subtitle>
  <updated>2024-10-08T11:26:51+08:00</updated>
  <author>
    <name>winnie</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator>
  <rights> © 2024 winnie </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>GC(Garbage Collection)란?</title>
    <link href="http://localhost:4000/posts/java-gc/" rel="alternate" type="text/html" title="GC(Garbage Collection)란?" />
    <published>2024-10-05T00:00:00+08:00</published>
  
    <updated>2024-10-08T00:54:57+08:00</updated>
  
    <id>http://localhost:4000/posts/java-gc/</id>
    <content src="http://localhost:4000/posts/java-gc/" />
    <author>
      <name>winnie</name>
    </author>

  
    
    <category term="Java" />
    
  

  <summary>프로그래밍 언어에서 자동으로 메모리를 관리하는 기능이다.

객체를 더 이상 사용하지 않을 때 그 객체를 메모리에서 자동으로 해제하여 메모리 누수를 방지한다.

개발자가 메모리를 직접 관리할 필요가 없어, 메모리 할당과 해제를 자동으로 처리하여 오류를 줄인다.
메모리 누수와 이중 해제 등 메모리 관련 버그를 줄여 프로그램의 안정성을 높이며, 메모리 공간을 효율적으로 사용할 수 있도록 한다.

GC는 크게 두 가지 메모리 영역에서 동작한다.

  Young Generation (Young 영역)
  Old Generation (Old 영역)




JVM 메모리 구조

  Eden Space: 새롭게 생성된 객체가 우선 저장되는 공간.
  Survivor Space: Eden 영역에서 살아남은 객체가 이동...</summary>

  </entry>

  
  <entry>
    <title>JIT 컴파일러?</title>
    <link href="http://localhost:4000/posts/java-jit-compiler/" rel="alternate" type="text/html" title="JIT 컴파일러?" />
    <published>2024-10-01T00:00:00+08:00</published>
  
    <updated>2024-10-01T00:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/java-jit-compiler/</id>
    <content src="http://localhost:4000/posts/java-jit-compiler/" />
    <author>
      <name>winnie</name>
    </author>

  
    
    <category term="Java" />
    
  

  <summary>자바 파일(.java)을 컴파일러를 통해 클래스 파일(.class/바이트코드)로 만든다.
  이후 자바 바이트 코드를 JVM이 읽고 실행한다.



  자바 바이트 코드
  JVM이 이해할 수 있는 언어로 변화나된 자바 소스 코드
자바 컴파일러에 의해 변환되는 코드의 명령어 크기가 1 바이트여서 자바 바이트 코드라 한다.
자바 바이트 코드는 자바 가상 머신만 설치되어 있으면, 어떤 운영체제에서도 실행될 수 있다.




컴파일러와 인터프리터
컴파일러와 인터프리터 모두 고수준 언어를 기계어로 변환시킨다.

컴파일러는 소스코드 전체를 한 번에 번역하여 목적 파일로 만들어 메모리에 적재하는 방식이다.
인터프리터는 소스코드를 한 행씩 중간 코드로 번역 후 실행한다.

컴파일러

  컴파일이 완료된 실행 파일은...</summary>

  </entry>

  
  <entry>
    <title>쿠키, 세션 그리고 토큰 인증</title>
    <link href="http://localhost:4000/posts/network-authentication-method/" rel="alternate" type="text/html" title="쿠키, 세션 그리고 토큰 인증" />
    <published>2024-09-28T00:00:00+08:00</published>
  
    <updated>2024-09-28T00:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/network-authentication-method/</id>
    <content src="http://localhost:4000/posts/network-authentication-method/" />
    <author>
      <name>winnie</name>
    </author>

  
    
    <category term="Network" />
    
  

  <summary>HTTP는 상태를 Stateless 의 비연결 프로토콜이다. 
따라서, 서버는 이전의 요청이 정보에 대해서 알 수 없다.

HTTP 비연결성, 보안 문제를 해결하기 위한 방법에는 쿠키, 세션, 토큰 방식이 있다.

쿠키 인증

쿠키는 서버가 사용자의 웹 브라우저에 전송하는 작은 데이터 조각이다.
key=value 형식의 문자열 데이터 묶음으로,

브라우저는 이 문자열 데이터 조각을 저장해두었다가, 동일한 서버에서 재 요청시 쿠키 데이터를 전송한다.

서버와 클라이언트 간의 연결 유지를 구현하기 위해 서로를 인식할 수 있는 식별데이터이다.


  브라우저에 정보를 저장하여, 사용자가 웹 사이트에 다시 방문할때 로그인 정보나, 사용자의 정보를 유지할 수 있다.
  쿠키는 서버에서 생성하고 클라이언트에 저장...</summary>

  </entry>

  
  <entry>
    <title>HTTP (Hyper Text Transfer Protocol)</title>
    <link href="http://localhost:4000/posts/network-http/" rel="alternate" type="text/html" title="HTTP (Hyper Text Transfer Protocol)" />
    <published>2024-09-25T00:00:00+08:00</published>
  
    <updated>2024-10-03T00:51:05+08:00</updated>
  
    <id>http://localhost:4000/posts/network-http/</id>
    <content src="http://localhost:4000/posts/network-http/" />
    <author>
      <name>winnie</name>
    </author>

  
    
    <category term="Algorithm" />
    
  

  <summary>웹에서 클라이언트(브라우저)와 서버 간에 데이터를 주고받기 위한 프로토콜.

인터넷을 통해 다양한 웹 리소스를 전송할 수 있다. 
비연결형이며 상태를 유지하지 않고, 요청과 응답에 의해 통신이 이루어진다.



특징

  비연결성 : 클라이언트와 서버는 요청, 응답이 완료되면 연결을 끊는다. 각 요청은 독립적이면 이전 요청의 정보는 다음 요청에 전달되지 않는다.
  Stateless : 서버는 요청 간 클라이언트의 상태를 저장하지 않는다. 따라서 클라이언트가 이전에 어떤 페이지를 접근했는지 알 수 없다. 
이것을 보완하기 위해 쿠키, 세션 등을 사용하여 상태를 유지할 수 있다.
  요청-응답 구조 : 클라이언트가 서버에 요청을 보내면 서버는 응답을 반환한다.
요청과 응답은 헤더와 본문으로 구성된다.
 ...</summary>

  </entry>

  
  <entry>
    <title>버블 정렬 Bubble Sort 알고리즘</title>
    <link href="http://localhost:4000/posts/algorithm-bubble-sort/" rel="alternate" type="text/html" title="버블 정렬 Bubble Sort 알고리즘" />
    <published>2024-09-25T00:00:00+08:00</published>
  
    <updated>2024-10-03T00:51:05+08:00</updated>
  
    <id>http://localhost:4000/posts/algorithm-bubble-sort/</id>
    <content src="http://localhost:4000/posts/algorithm-bubble-sort/" />
    <author>
      <name>winnie</name>
    </author>

  
    
    <category term="Algorithm" />
    
  

  <summary>정렬 알고리즘 중 하나로,
인접한 두 요소를 비교하고 필요에 따라 자리를 교환하면서 배열을 정렬하는 방식이다.



동작 방식



  배열의 첫 번째 요소와 두 번째 요소를 비교한다.
  첫 번째 요소가 더 크면 두 요소와 자리를 바꾼다.
  그런 다음 두 번째 요소와 세 번째 요소를 비교한다.
  이 과정을 배열 끝까지 반복한다. 한 번의 반복이 끝나면 가장 큰 요소가 배열의 마지막 자리에 위치한다.
  두 번째 반복에서는 마지막 요소는 이미 정렬되어있기 때문, 그 전까지만 반복한다.
  위의 과정을 배열이 정렬될 때까지 반복한다.




구현
public class 버블정렬 {
    public static void main(String[] args) {
        int[] array = ...</summary>

  </entry>

</feed>


