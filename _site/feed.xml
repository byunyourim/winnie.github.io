

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://winnie.github.io/</id>
  <title>winnie's Tech Blog</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing. 생각하라, 질문하라, 공부하</subtitle>
  <updated>2024-10-03T01:04:09+08:00</updated>
  <author>
    <name>winnie</name>
    <uri>https://winnie.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://winnie.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://winnie.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator>
  <rights> © 2024 winnie </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>JIT 컴파일러?</title>
    <link href="https://winnie.github.io/posts/java-jit_compiler/" rel="alternate" type="text/html" title="JIT 컴파일러?" />
    <published>2024-10-01T00:00:00+08:00</published>
  
    <updated>2024-10-03T00:51:05+08:00</updated>
  
    <id>https://winnie.github.io/posts/java-jit_compiler/</id>
    <content src="https://winnie.github.io/posts/java-jit_compiler/" />
    <author>
      <name>winnie</name>
    </author>

  
    
    <category term="Java" />
    
  

  <summary>자바 파일(.java)을 컴파일러를 통해 클래스 파일(.class/바이트코드)로 만든다.
  이후 자바 바이트 코드를 JVM이 읽고 실행한다.



  자바 바이트 코드
  JVM이 이해할 수 있는 언어로 변화나된 자바 소스 코드
자바 컴파일러에 의해 변환되는 코드의 명령어 크기가 1 바이트여서 자바 바이트 코드라 한다.
자바 바이트 코드는 자바 가상 머신만 설치되어 있으면, 어떤 운영체제에서도 실행될 수 있다.




컴파일러와 인터프리터
컴파일러와 인터프리터 모두 고수준 언어를 기계어로 변환시킨디ㅏ.

컴파일러는 소스코드 전체를 한 번에 번역하여 목적 파일로 만들어 메모리에 적재하는 방식이다.
인터프리터는 소스코드를 한 행씩 중간 코드로 번역 후 실행한다.

컴파일러

  컴파일이 완료된 실행 파일...</summary>

  </entry>

  
  <entry>
    <title>쿠키, 세션 그리고 토큰 인증</title>
    <link href="https://winnie.github.io/posts/network-%EC%BF%A0%ED%82%A4,%EC%84%B8%EC%85%98,-%ED%86%A0%ED%81%B0/" rel="alternate" type="text/html" title="쿠키, 세션 그리고 토큰 인증" />
    <published>2024-09-28T00:00:00+08:00</published>
  
    <updated>2024-10-03T00:51:05+08:00</updated>
  
    <id>https://winnie.github.io/posts/network-%EC%BF%A0%ED%82%A4,%EC%84%B8%EC%85%98,-%ED%86%A0%ED%81%B0/</id>
    <content src="https://winnie.github.io/posts/network-%EC%BF%A0%ED%82%A4,%EC%84%B8%EC%85%98,-%ED%86%A0%ED%81%B0/" />
    <author>
      <name>winnie</name>
    </author>

  
    
    <category term="Network" />
    
  

  <summary>HTTP는 상태를 Stateless 의 비연결 프로토콜이다. 
따라서, 서버는 이전의 요청이 정보에 대해서 알 수 없다.

HTTP 비연결성, 보안 문제를 해결하기 위한 방법에는 쿠키, 세션, 토큰 방식이 있다.

쿠키 인증

쿠키는 서버가 사용자의 웹 브라우저에 전송하는 작은 데이터 조각이다.
key=value 형식의 문자열 데이터 묶음으로,

브라우저는 이 문자열 데이터 조각을 저장해두었다가, 동일한 서버에서 재 요청시 쿠키 데이터를 전송한다.

서버와 클라이언트 간의 연결 유지를 구현하기 위해 서로를 인식할 수 있는 식별데이터이다.


  브라우저에 정보를 저장하여, 사용자가 웹 사이트에 다시 방문할때 로그인 정보나, 사용자의 정보를 유지할 수 있다.
  쿠키는 서버에서 생성하고 클라이언트에 저장...</summary>

  </entry>

  
  <entry>
    <title>HTTP (Hyper Text Transfer Protocol)</title>
    <link href="https://winnie.github.io/posts/network-http/" rel="alternate" type="text/html" title="HTTP (Hyper Text Transfer Protocol)" />
    <published>2024-09-25T00:00:00+08:00</published>
  
    <updated>2024-10-03T00:51:05+08:00</updated>
  
    <id>https://winnie.github.io/posts/network-http/</id>
    <content src="https://winnie.github.io/posts/network-http/" />
    <author>
      <name>winnie</name>
    </author>

  
    
    <category term="Algorithm" />
    
  

  <summary>웹에서 클라이언트(브라우저)와 서버 간에 데이터를 주고받기 위한 프로토콜.

인터넷을 통해 다양한 웹 리소스를 전송할 수 있다. 
비연결형이며 상태를 유지하지 않고, 요청과 응답에 의해 통신이 이루어진다.



특징

  비연결성 : 클라이언트와 서버는 요청, 응답이 완료되면 연결을 끊는다. 각 요청은 독립적이면 이전 요청의 정보는 다음 요청에 전달되지 않는다.
  Stateless : 서버는 요청 간 클라이언트의 상태를 저장하지 않는다. 따라서 클라이언트가 이전에 어떤 페이지를 접근했는지 알 수 없다. 
이것을 보완하기 위해 쿠키, 세션 등을 사용하여 상태를 유지할 수 있다.
  요청-응답 구조 : 클라이언트가 서버에 요청을 보내면 서버는 응답을 반환한다.
요청과 응답은 헤더와 본문으로 구성된다.
 ...</summary>

  </entry>

  
  <entry>
    <title>버블 정렬 Bubble Sort 알고리즘</title>
    <link href="https://winnie.github.io/posts/algorithm-bubble-sort/" rel="alternate" type="text/html" title="버블 정렬 Bubble Sort 알고리즘" />
    <published>2024-09-25T00:00:00+08:00</published>
  
    <updated>2024-10-03T00:51:05+08:00</updated>
  
    <id>https://winnie.github.io/posts/algorithm-bubble-sort/</id>
    <content src="https://winnie.github.io/posts/algorithm-bubble-sort/" />
    <author>
      <name>winnie</name>
    </author>

  
    
    <category term="Algorithm" />
    
  

  <summary>정렬 알고리즘 중 하나로,
인접한 두 요소를 비교하고 필요에 따라 자리를 교환하면서 배열을 정렬하는 방식이다.



동작 방식



  배열의 첫 번째 요소와 두 번째 요소를 비교한다.
  첫 번째 요소가 더 크면 두 요소와 자리를 바꾼다.
  그런 다음 두 번째 요소와 세 번째 요소를 비교한다.
  이 과정을 배열 끝까지 반복한다. 한 번의 반복이 끝나면 가장 큰 요소가 배열의 마지막 자리에 위치한다.
  두 번째 반복에서는 마지막 요소는 이미 정렬되어있기 때문, 그 전까지만 반복한다.
  위의 과정을 배열이 정렬될 때까지 반복한다.




구현
public class 버블정렬 {
    public static void main(String[] args) {
        int[] array = ...</summary>

  </entry>

  
  <entry>
    <title>LRU(Least Recently Used)Cache 알고리즘</title>
    <link href="https://winnie.github.io/posts/algorithm-lru/" rel="alternate" type="text/html" title="LRU(Least Recently Used)Cache 알고리즘" />
    <published>2024-09-13T00:00:00+08:00</published>
  
    <updated>2024-10-03T00:51:05+08:00</updated>
  
    <id>https://winnie.github.io/posts/algorithm-lru/</id>
    <content src="https://winnie.github.io/posts/algorithm-lru/" />
    <author>
      <name>winnie</name>
    </author>

  
    
    <category term="Algorithm" />
    
  

  <summary>캐시는 데이터나 값을 미리 복사해 놓는 임시 저장소를 말한다.
데이터를 접근하는 시간이 오래 걸리는 경우나 값을 다시 계산하는 시간을 절약하고 싶은 경우 사용한다.
캐시에 데이터를 미리 복사해 놓으면 계산이나 접근 없이 더 빠른 속도로 데이터에 접근이 가능하다.



LRU (Least Recently Used)
가장 최근에 사용되지 않은 데이터를 제거하는 방식

빠른 접근과, 업데이터가 가능하지만 많ㄱ은 공간을 차지한다는 단점이 있다.

새로운 데이터가 캐시에 저장될 때, 캐시에 있는 데이터에 접근할 때마다 해당 데이터를
가장 최근에 사용된 데이터로 표시하고 가장 오래 전에 사용된 데이터를 제거한다.
따라서 가장 최근에 사용된 데이터를 캐시에 보존한다.

이중 연결 리스트나 해시 맵과 같은 자료 구조...</summary>

  </entry>

</feed>


