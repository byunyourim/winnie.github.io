


[ { "title" : "", "category" : "", "tags" : " ", "url" : "/Type-on-Strap/2024/07/18/2024-06-27-annotation-configuration.html", "date" : "July 18, 2024", "excerpt" : "@Configuration 설정 클랫스를 정의할 때 사용합니다.해당 클래스가 스프링 Bean 구성 클래스임을 나타내며, 스프링 컨테이너에 의해 빈으로 관리됩니다.", "content" : "@Configuration 설정 클랫스를 정의할 때 사용합니다.해당 클래스가 스프링 Bean 구성 클래스임을 나타내며, 스프링 컨테이너에 의해 빈으로 관리됩니다." }, { "title" : "", "category" : "", "tags" : " ", "url" : "/Type-on-Strap/2024/07/18/2024-06-27-annotation-allargsconstructor-requiredargsconstructor.html", "date" : "July 18, 2024", "excerpt" : "프로젝트 진행 중 계속해서 의존성 주입 문제가 생겼다.도대체 뭘까..@Service@RequiredArgsConstructorpublic class SmsSenderService { private final SmsCertification smsCertification; @Value(&amp;quot;${coolsms.apikey}&amp;quot;) private String apiKey; @Value(&amp;quot;${coolsms....", "content" : "프로젝트 진행 중 계속해서 의존성 주입 문제가 생겼다.도대체 뭘까..@Service@RequiredArgsConstructorpublic class SmsSenderService { private final SmsCertification smsCertification; @Value(&quot;${coolsms.apikey}&quot;) private String apiKey; @Value(&quot;${coolsms.apisecret}&quot;) private String apiSecret; @Value(&quot;${coolsms.fromnumber}&quot;) private String fromNumber; // 코드 생략}@RequiredArgsConstructor 와 @AllArgsConstructor 를 알아보자둘 다 Lombok 에서 제공하는 어노테이션으로 코드를 간결하게 작성할 수 있도록 도와주는 역할을 합니다.@RequiredArgsConstructor클래스의 final로 선언된 필드나 @NonNull 로 표시된 필드를 기반으로 생성자를 생성합니다.생성자는 이러한 필드들을 매개변수로 받아 초기화합니다.@RequiredArgsConstructorpublic class User { private final String name; // final로 선언 private final int age; /* 아래와 같은 생성자가 자동으로 생성됩니다. public User(String name, int age) { this.name = name; this.age = age; } */} 즉, 초기화되지 않은 final 필드의 생성자를 생성합니다.@AllArgsConstructor모든 필드를 기반으로 생성자를 생성합니다.final로 선언되지 않은 필드도 포함하여 모든 필드를 매개변수로 받는 생성자를 생성합니다.@AllArgsConstructorpublic class User { private String name; private int age; /* 아래와 같은 생성자가 자동으로 생성됩니다. public User(String name, int age) { this.name = name; this.age = age; } */}@Value 와 @RequiredArgsConstructor?@Value 이 뭘까?final 로 선언한 필드에 @Value를 사용하면?스프링이 빈을 생성할 때 해당 필드를 초기화할 수 없기 때문에 에러가 발생합니다.@Value 을 사용할 때는 생성자 인젝션을 사용하지 않기 때문에 @RequiredArgsConstructor 를 사용하여생성자를 자동을 생성할 수 없습니다.@Value 와 @AllArgsConstructor?스프링은 빈을 초기화 할 때 @Value 어노테이션을 사용하여 외부 프로퍼티 파일에서 값을 주입할 수 있습니다.이것은 생성자 인젝션을 지원하지 않습니다.따라서 @AllArgsConstructor을 사용할 때는 스프링이 @Value 어노테이션을 통해 초기화할 수 없는 필드에 대해서는 생성자를 자동으로 생성하지 않습니다. 이로 인해 apiKey, apiSecret, fromNumber 필드는 @Value 어노테이션을 통해 초기화할 수 없어서 에러가 발생합니다." }, { "title" : "JWT", "category" : "", "tags" : " ", "url" : "/Type-on-Strap/spring/2024/07/02/spring-jwt.html", "date" : "July 2, 2024", "excerpt" : "프로젝트 중에 JWT를 사용하여서잘 몰라서.. 공부하고자이전에는?JWT가 보급되기 전에는 주로 세션 기반 인증 방식이 사용되었습니다.세션의 Stateful 로 상태를 유지하는 것이 특징입니다.세션 기반 인증은 사용자의 정보를 서버에 저장하고, 클라이언트는 세션ID를 통해인증 상태를 유지하는 방식입니다.세션은 서버 메모리나 데이터베이스에 저장되어야하기 때문에 서버 측에서 상태를 유지해야합니다.매 요청맏마 서버와 통신해야하기 때문에 부하가 초...", "content" : "프로젝트 중에 JWT를 사용하여서잘 몰라서.. 공부하고자이전에는?JWT가 보급되기 전에는 주로 세션 기반 인증 방식이 사용되었습니다.세션의 Stateful 로 상태를 유지하는 것이 특징입니다.세션 기반 인증은 사용자의 정보를 서버에 저장하고, 클라이언트는 세션ID를 통해인증 상태를 유지하는 방식입니다.세션은 서버 메모리나 데이터베이스에 저장되어야하기 때문에 서버 측에서 상태를 유지해야합니다.매 요청맏마 서버와 통신해야하기 때문에 부하가 초래됩니다.이러한 문제로 등장한 것이 JWT로 Stateless 인 것이 특징입니다.JWTJSON Web Token의 약자로 정보를 JSON 형태로 클라이언트에 저장하고 서버는 해당 토큰을 검증하여인증을 처리하는 방식입니다.토큰 안에 미리 인증에 필요한 정보를 넣어두며 매 요청마다 서버와 통신할 필요가 없습니다.이로 인해 서버 부하와 같은 문제를 해결할 수 있습니다.구조헤더, 페이로드, 서명 세 부분으로 구성됩니다.헤더 부분은 알고리즘 방식과 토큰의 타입을 지합니다. 서명 생성을 위해 어떤 알고리즘을 사용할지 식별하는 부분입니다.페이로드는 클레임이라고 불리는 정보 조각을 포함합니다.클레임은 토큰에 추가할 정보를 의미하며 사용자 ID, 권한 정보등이 포함될 수 있습니다.하지만 디코딩을 통해 들어있는 정보를 확이할 수 있기 때문에 민감한 정보는 포함하지 않는 것이 좋습니다.서명은 토큰을 인코딩하거나 유효성 검증을 위해서 사용되는 부분으로,헤더와 페이로드를 합친 후 비밀키를 사용하여 생성합니다.서버는 클라이언트로부터 받은 토큰을 검증하기 위해 서명 부분을 해싱알고리즘과 비밀키로 다시 생성하고이를 클라이언트가 전달한 서명과 비교합니다.일치라면 인증이 유요한 것으로 판단합니다." }, { "title" : "Blocking vs Non-Blocking", "category" : "", "tags" : " ", "url" : "/Type-on-Strap/java/2024/07/01/java-%EB%B8%94%EB%A1%9C%ED%82%B9-%EB%85%BC%EB%B8%94%EB%A1%9C%ED%82%B9.html", "date" : "July 1, 2024", "excerpt" : "Blocking vs Non-BlockingBlocking IO는 작업이 완료될 때까지 스레드가 대기하는 방식Non-Blocking IO는 작업이 완료되지 않더라도 대기하지 않고 다른 작업을 처리하는 방식Blocking IO에서의 문제점입출력 작업이 완료될때 까지 다른 스레드가 대기하여야한다. 따라서 멀티 스레드 환경에서 대기시간이 오래걸릴수있다. 많은 클라이언트의 요청을 동시에 처리할 수 없으며 블록상태가 발생할 수 있습니다.Non-Bl...", "content" : "Blocking vs Non-BlockingBlocking IO는 작업이 완료될 때까지 스레드가 대기하는 방식Non-Blocking IO는 작업이 완료되지 않더라도 대기하지 않고 다른 작업을 처리하는 방식Blocking IO에서의 문제점입출력 작업이 완료될때 까지 다른 스레드가 대기하여야한다. 따라서 멀티 스레드 환경에서 대기시간이 오래걸릴수있다. 많은 클라이언트의 요청을 동시에 처리할 수 없으며 블록상태가 발생할 수 있습니다.Non-Blocking IO에서의 장단점작업이 완료될 때까지 기다리지 않고 해당 작업을 수행하는 동안 다른 작업을 수행할 수 있는 방식입니다.요청한 작업이 완료되면, 결과를 처리할 수 있도록 콜백함수 등을 통해 알림을 받습니다.병렬적으로 여러 작업을 처리할 수 있는 장점이 있습니다.대기시간이 최소화되어 시스템이 더 효율적을 자원을 이용할 수 있으며 여러 작업을 동시에 처리하기 때문에 응답성이 향상됩니다.비교적 적은 스레드로 많은 요청을 처리할 수 있어 스케일링에 유리합니다.IO 작업이 많이 발생하는 환경에 효과적입니다.하지만 비동기 프로그래밍으로 동기적 프로그래밍보다 복잡하며 콜백 지옥과 같은 문제가 발생할 수 있습니다.또한 이벤트를 기반으로 동작하기 때문에 실행 흐름을 추적하거나 디버깅이 어렵습니다.비동기 작업이 많아질수록 메모리 사용량이 증가할 수 있습니다.주로 다수의 클라이언트 요청을 비동기로 처리할 때 사용됩니다. 또한 웹 서버에서 여러 요청을 동시에 처리하고IO 작업이 완료될 때까지 기다리지 않고 다른 요청을 처리하는데 유용하게 사용됩니다.대규모 데이터베이스나 파일 처리에서 비동기 IO는 시스템의 처리량을 향상 시키는데 기여할 수 있습니다.구현방법에는 가장 기본적인 방법으로 자바스크립트에서 콜백함수를 사용하거나 promise 를 사용하는 방법이 있습니다.또한 자바의 NIO 와 같은 라이브러리를 사용하여 블로킹 IO 를 비동기적으로 처리할 수 있습니다." }, { "title" : "영속성 컨텍스", "category" : "", "tags" : " ", "url" : "/Type-on-Strap/jpa/2024/07/01/jpa-%EC%98%81%EC%86%8D%EC%84%B1%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8.html", "date" : "July 1, 2024", "excerpt" : "영속성 컨텍스트JPA 는 영속성 컨텍스트라는 작은 메모리 공간을 가지고 있습니다. 이 영속성 컨텍스트는 엔티티 매니저의 생명주기와 일치하며, 엔티티를 관리하고 데이터베이스와 통신을 처리합니다.하나의 영속성 컨텍스트는 트랜잭션 단위로 관리되며, 엔티티의 상태를 추적하고 엔티티를 데이터베이스와 동기화합니다.@Service@Transactionalpublic class UserService { @PersistenceContext ...", "content" : "영속성 컨텍스트JPA 는 영속성 컨텍스트라는 작은 메모리 공간을 가지고 있습니다. 이 영속성 컨텍스트는 엔티티 매니저의 생명주기와 일치하며, 엔티티를 관리하고 데이터베이스와 통신을 처리합니다.하나의 영속성 컨텍스트는 트랜잭션 단위로 관리되며, 엔티티의 상태를 추적하고 엔티티를 데이터베이스와 동기화합니다.@Service@Transactionalpublic class UserService { @PersistenceContext private EntityManager em; public void saveUser(User user) { // 엔티티를 영속성 컨텍스트에 저장 em.persist(user); } public User findUser(Long userId) { // 1차 캐시에서 엔티티를 조회 (데이터베이스 조회 필요 없음)em.find(User.class, user.getId()) 는 JPA 에서 제공하는 메서드로 데이터베이스에 접근하여 return em.find(User.class, userId); 지정된 엔티티 클래스와 키를 기반으로 엔티티를 조회합니다. } public void updateUser(User user) { // 엔티티의 상태 변경 (Dirty Checking) User managedUser = em.find(User.class, user.getId()); managedUser.setUsername(user.getUsername()); managedUser.setEmail(user.getEmail()); // 트랜잭션이 커밋될 때 데이터베이스에 자동으로 반영됨이로써 반복적으로 조죄할 때 데이터베이스에 대한 추가적인 조회를 피할 수 있으며 성능이 향상됩니다. } public void deleteUser(Long userId) { // 1캐시는 영속성 컨텍스트의 생명주기에 의존하기 때문에 트랜잭션이 종료되면 1차 캐시도 함께 종료됩니다. // 엔티티를 영속성 컨텍스트에서 제거 // 이후에 같은 엔티티를 조회할 경 다시 데이터베이스에서 조회해야 합니다. User user = em.find(User.class, userId); em.remove(user); // 트랜잭션이 커밋될 때 데이터베이스에서 삭제됨 }}1차 캐시영속성 컨텍스트의 일부로 JVM 메모리에 위치합니다. 따라서 데이터베이스에 접근하는 것보다 훨씬 빠른 접근이 가능합니다다.엔티티의 식별자를 키로 사용하여 엔티티를 저장합니다. 이 식별자를 사용하여 빠르게 엔티티를 조회할 수 있습니다. public User findUser(Long userId) { // 1차 캐시에서 엔티티를 조회 (데이터베이스 조회 필요 없음) return em.find(User.class, userId); }em.find(User.class, user.getId()) 메서드는 데이터베이스에서 엔티티를 조회하고 이 엔티티를 영속성 컨텍스트에 저장합니다.이때 저장된 엔티티는 1차 캐시에 저장됩니다.이후 동일한 엔티티를 다시 조회하는 경우 영속성 컨텍스트에서 먼저 조회하여 데이터베이스에 접근하지 않고 1차 캐시에 저장된 엔티티를 반환합니다.1차 캐시를 통해 동일한 엔티티를 반복적으로 조회할 때 데이터베이스에 대한 추가적인 조회를 피할 수 있습니다영속성 컨텍스트는 트랜잭션 범위 내에서 관리되기 때문 동일한 엔티티에 대해 일관된 상태를 유지할 수 있습니다.하지만 컨텍스트의 생명주기에 의존하기 때문에 트랜잭션이 종료되면 1차 캐시도 함께 종료됩니다.따라섯 이후에 같은 엔티티를 조회할 때는 다시 데이터베이스에서 조회해야 합니다.1차 캐시는 멤모리에 저장되기 때문에 많은 수의 엔티티를 동시에 처리하 할 때 메모리 사용에 주의해야 합니다.지연 로딩연관된 엔티티나 컬렉션을 실제로 사용할 때까지 데이터베이스에서 로딩하지 않고 필요한 시점에 로딩하는 기능입니다.지연로딩은 FetchType.LAZY로 설정하며, 실제 엔티티가 필요한 시점에 데이터베이스에서 조회합니다.반면에 즉시로딩(FetchType.EAGER)은 엔티티를 조회할 때 연관된 엔티티들을 즉시 한번에 조회합니다. 이는 성능 저하를 초래할 수 있으므로 주의해서 사용해야 합니다.@Entity@Table(name = &quot;orders&quot;)public class Order { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Column(name = &quot;order_id&quot;) private Long id; @ManyToOne(fetch = LAZY) @JoinColumn(name = &quot;user_id&quot;) private User user;}단순한 관계나 적은 데이터 양을 다룰 때는 즉시로딩을 사용하는 것이 좋습니다.대규모 데이터를 다루거나 성능 최적화가 필요한 경우에는 지연로딩을 고려해야 합니다.기본적으로는 지연로딩을 사용하고, 성능 문제나 데이터 접근 패턴에 따라 필요할 때 즉시로딩으로 변경하는 것이 바람직합니다.변경 감지트랜잭션 내에서 엔티티의 상태 변경을 감지하여 자동으로 데이터베이스와 동기화합니다.트랜잭션 내에서 엔티티의 수정이 이루어져야 변경 감지가 동작합니다. 트랜잭션이 커밋될 때 변경 사항이 데이터베이스에 반영됩니다.트랜잭션이 커밋되기 전까지는 데이터베이스에 변경 사항이 반영되지 않습니다. @PersistenceContext private EntityManager entityManager; public void updateProduct(Long productId, String newName, double newPrice) { // 엔티티 조회 Product product = entityManager.find(Product.class, productId); // 엔티티 수정 product.setName(newName); product.setPrice(newPrice); // 변경 감지가 발생하여 자동으로 데이터베이스에 반영됨 }별도의 save 메서드 호출이 필요하지 않습니다.트랜잭션 범위영속성 컨텍스트는 트랜잭션 범위 내에서 엔티티를 관리하므로, 트랜잭션이 커밋되거나 롤백되기 전까엔티티의 변경 사항을 추적하고 커밋할 때 최종적으로 데이터베이스에 반영합니다." }, { "title" : "JPA란", "category" : "", "tags" : " ", "url" : "/Type-on-Strap/jpa/2024/07/01/jpa-jpa.html", "date" : "July 1, 2024", "excerpt" : "JPA란자바 애플리케이션에서 관계형 데이터베이스를 관리하고 조작할 수 있도록 도와주는 표준 API 입니다.자바 객체를 데이터베이스 테이블에 매핑하여 객체지향 프로그래밍과 관계형 데이터베이스 간의 불일치를 해결합니다.JPA를 사용하면 SQL쿼리를 직접 작성하지 않고도 데이터베이스 작업을 수행할 수 있습니다.등장 배경??JPA 가 등장하기 전에는 객체지향 프로그래밍 언어와 관계형 데이터베이스 간의 매핑을 직접 구현했습니다.주로 JDBC를 이용...", "content" : "JPA란자바 애플리케이션에서 관계형 데이터베이스를 관리하고 조작할 수 있도록 도와주는 표준 API 입니다.자바 객체를 데이터베이스 테이블에 매핑하여 객체지향 프로그래밍과 관계형 데이터베이스 간의 불일치를 해결합니다.JPA를 사용하면 SQL쿼리를 직접 작성하지 않고도 데이터베이스 작업을 수행할 수 있습니다.등장 배경??JPA 가 등장하기 전에는 객체지향 프로그래밍 언어와 관계형 데이터베이스 간의 매핑을 직접 구현했습니다.주로 JDBC를 이용하여 데이터베이스와 연결하여 쿼리를 실행하고 결과를 가져왔습니다.Connection 으로 데이터베이스를 연결을 설정하고 관리하였습니다. 개발자는 쿼리를 직접 작성하여 데이터베이스에 보낸 후반환된 결과를 받아 자바 객체로 매핑하는 작업을 수동을 해주어야 했습니다.추가적으로 SQL 실행 중 발생할 수 있는 예외를 처리해야합니다.SQL을 사용하여 데이터베이스와 상호작용해야 했으며, 반복적인 코드작성이 일어났습니다.쿼리를 직접 다루기 때문에 발생할 수 있는 오류가 많고 유지보수가 어렵다는 문제가 있습니다.객체 지향 언어의 클래스와 객체를 관계형 데이터베이스의 테이블과 매핑하는 과정에서 일관성을 유지하기 어려웠습니다.따라서 이러한 문제를 해결하기 위해 나온 것이 ORM 입니다.ORM 프레임워크객체와 데이터베이스 매핑 자동화 ORM 프레임워크는 객체와 데이터베이스 간의 매핑을 자동으로 처리해줍니다.CRUD 작업의 객체지향적 처리 CRUD(Create, Read, Update, Delete) 작업을 객체지향적으로 처리할 수 있습니다.표준화된 인터페이스 제공 JPA와 같은 ORM 프레임워크는 표준화된 인터페이스를 제공하여, 다양한 데이터베이스와도 쉽게 연동할 수 있습니다.성능 최적화 및 편의성 제공 내부적으로 캐싱, 지연로딩 등의 기법을 사용하여 성능을 최적화하고, 개발자가 데이터베이스와의 상호작용을 편리하게 처리할 수 있습니다.###JPA는 개발자가 객체지향적으로 데이터를 다루면서 이것을 관계형 데이터베이스에 저장하고 조회할 수 있도록 도와줍니다.객체와 테이블 간의 매핑 규칙을 정의하고 이를 바탕으로 JPA 구현체가 SQL을 생성하여 데이터베이스와 상호작용합니다.ORM을 통해 객체와 데이터베이스 간의 매핑을 자동화하기 때문에 개발자는 객체지향적인 코드를 집중적으로 작성할 수 있습니다.데이터베이스 스키마의 변경이 발생해도 JPA가 자동으로 SQL을 생성하여 매핑을 처리해주기 때문에 유지보수가 편리합니다.개념 엔티티 영속성을 가진 객체 데이터베이스 테이블에 매핑되는 자바 클래스로 각 인스턴스는 테이블의 행을 나타냅니다. 엔티티 매니저 엔티티의 생명주기를 관리하고 데이터베이스와 상호작용합니다. 엔티티를 저장, 삭제, 조회하는 등의 작업을 수행합니다. 영속성 컨텍스트 엔티티 객체를 관리하는 메모리상의 공간입니다. 데이터베이스와의 상호작용을 중재하는 역할을 합니다. JPQL 엔티티 객체를 대상으로 쿼리를 작성합니다. 영속성(Persistence)이란? 데이터를 일시적인 저장소가 아닌 영구적인 저장소에 저장하는 것을 의미합니다.영속성을 통해 프로그램이 종료되더라도 데이터가 손실되지 않고 유지될 수 있으며 시스템의 오류나 충돌이 발생했을 때데이터를 복구할 수 있습니다.여러 프로그램이나 사용자가 동일한 데이터를 사용할 수 있으며 트랜잭션을 통해 데이터의 일관성을 유지할 수 있습니다.ex) 데이터를 데이터베이스에 저장하여 프로그램이 종료되더라도 데이터가 유지되도록 합니다.데이터를 파일에 저장하여 프로그램이 종료되더라도 데이터가 파일에 남아있도록 합니다.JPA에서의 “영속성”은 엔티티 객체의 생명 주기 중 하나로, 엔티티 객체가 영속성컨텍스트에 의해 관리되는 상태를 말합니다.엔티티 객체를 영속성 컨텍스트에 저장하고 이를 통해 데이터베이스와의 지속적인 동기화를 관리합니다.자바에서는 JPA를 사용하여 영속성을 관리할 수 있습니다.이를 통해 객체를 데이터베이스 테이블에 매핑하고 CRUD 작업을 쉽게 수행할 수 있습니다.영속성 컨텍스트엔티티 매니저가 관리하는 엔티티 객체들의 집합입니다.영속성 컨텍스트는 엔티티 객체를 캐시로 관리하여 데이터베이스와의 상호작용을 최적화하고 객체 상태의 변경을추적합니다.엔티티 객체를 메모리에 저장하고 관리하며 이를 통해 엔티티 객체가 데이터베이스와 동기화됩니다.엔티티 객체를 메모리에 캐싱하여, 동일한 트랜잭션 내에서 반복적인 데이터베이스 접근을 줄입니다. (1차 캐시)엔티티의 상태 변화를 감지하여 트랜잭션이 커밋될 때 변경된 내용을 데이터베이스에 반영합니다.딩 (변경감지)필요한 시점에 데이터베이스에서 데이터를 로드하는 기능을 제공합니다. (지연로딩)엔티티 객체의 생명 주기 비영속 (Transient)엔티티 객체가 영속성 컨텍스트에 의해 관릳되지 않은 상태입니다.데이터베이스와 연관이 없습니다. 영속 (Persistent)엔티티 객체가 영속성 컨텍스트에 의해 관리되는 상태입니다.엔티티 매니저를 통해 데이터베이스에 저장됩니다. 준영속 (Detached)한 번 영속상태 였지만 현재는 영속성 컨텍스트에 의해 관리되지 않는 상태입니다.영속성 컨텍스트가 닫히거나 detch() 메서드를 호출하여 엔티티가 분리될 때 발생합니다. 삭제 (Removed)엔티티 객체가 영속성 컨텍스트에 의해 삭제된 상태입니다.데이터베이스에서 해당 엔티티가 삭제됩니다. 주요 어노테이션 @Entity : 클래스가 엔티티임을 선언합니다. @Table : 엔티티와 매핑되는 데이터베이스 테이블을 지정합니다. @Id : 엔티티의 기본키를 지정합니다. @GeneratedValue : 기본키 값을 자동으로 생성하는 전략을 지정합니다. @Column : 엔티티 필드와 매핑되는 데이터베이스 컬럼을 지정합니다.@Entity@Table(name = &quot;user&quot;)@NoArgsConstructor(access = AccessLevel.PROTECTED)@Getter @Setterpublic class User{ @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Column(name = &quot;user_id&quot;, updatable = false) private Long id; private String email; private String password; private String phone; }JPA는 자동으로 엔티티와 데이터베이스 테이블 간의 매핑을 처리해주기때문에 개발자는 별도의 SQL 쿼리를 작성할 필요가 없습니다." }, { "title" : "Db Index", "category" : "", "tags" : " ", "url" : "/Type-on-Strap/2024/06/27/db-index.html", "date" : "June 27, 2024", "excerpt" : "title: index와 B-tree, Hash인덱스author: winniedate: 2024-06-28 10:00:00 +0800categories: [DB]render_with_liquid: false–인덱스란 데이터베이스 테이블에서 데이터를 빠르게 검색할 수 있도록 도와주는 데이터 구조인덱스는 테이블 내의 1개 또는 여러 개의 컬럼을 이용하여 생성할 수 있습니다. 인덱스는데이터베이스의 테이블과 별도로 저장되며, 인덱스를 저장하기 ...", "content" : "title: index와 B-tree, Hash인덱스author: winniedate: 2024-06-28 10:00:00 +0800categories: [DB]render_with_liquid: false–인덱스란 데이터베이스 테이블에서 데이터를 빠르게 검색할 수 있도록 도와주는 데이터 구조인덱스는 테이블 내의 1개 또는 여러 개의 컬럼을 이용하여 생성할 수 있습니다. 인덱스는데이터베이스의 테이블과 별도로 저장되며, 인덱스를 저장하기 위한 추가적인 저장공간이 필요합니다.테이블의 특정 컬럼에 대해서 인덱스를 생성하면, 해당 컬럼의 데이터를 정렬한 후 별도의 메모리 공간에 데이터의 물리적 주소와 함께 저장됩니다. 키 값 : 인덱스가 참조하는 컬럼 값 포인터/ 참조 : 실제 데이터가 저장된 테이블의 행을 가리키는 포인터해당 컬럼의 값을 키로 사용하기 때문에 테이블 전체를 스캔하지 않고 원하는 데이터를 찾을 수 있습니다.이는 검색속도를 향상시킵니다 정렬된 상태로 저장이 되기 때문에 정렬된 데이터에 빠르게 접근할 수 있습니다.장점인덱스를 이용하면 특정 키 값을 빠르게 검색할 수 있습니다. 이는 인덱스가 정렬된 상태이기 때문입니다.정렬된 데이터 구조이기 때문에 비트리 인덱스와 같은 알고리즘을 사용하여 데이터를 빠르게 찾을 수 있습니다.인덱스를 사용하면 전체 테이블을 스캔하지 않고 원하는 데이터를 찾을 수 있습니다. 따라서 더 빠른 응답시간을 제공할 수 있습니다.정렬되지 않은 데이터의 경우 특정 키 값을 찾기 위해 데이터를 순차적으로 스캔해야 하기 때문에 선형 검색을 수행해야 합니다.따라서 데이터가 많아질수록 검색 속도가 느려질 수 있습니다.단점인덱스는 추가적인 저장공간을 필요로 하기 때문에 데이터베이스의 크기가 증가할 수 있습니다.또한 데이터의 삽입, 삭제, 수정시 인덱스도 리밸런싱되어야 하기 때문에 오버헤드가 발생할 수 있습니다.키를 기준으로 검색하는 경우 빠른 속도를 기대할 수 있으나 다른 컬럼을 기준으로 검색하는 경우 해당 컬럼이 인덱스로 지정되지 않은 경우성능 저하가 발생할 수 있습니다. 따러서 자주 사용되는 검색 조건에 대해 적절한 인덱스를 생성하고 관리하는 것이 중요합니다.언제 사용해야 할까?특정 컬럼이 자주 검색 조건으로 사용될 때 인덱스를 생성하는 것이 효율적입니다.예로 주문 번호, 날짜, 사용자 ID 등 검색이 빈번한 컬럼은 인덱스를 통해 검색 성능을 향상시킬 수 있습니다.정렬과 같은 그룹화 작업이 자주 일어나는 컬럼에 사용하는 것도 쿼리의 성능을 향상시킬 수 있습니다.조인 연산에 사용되는 컬럼에 인덱스를 생성하거나, 범위 검색이나 부분 일치 검색을 수행할 때 사용할 수 있습니다.하지만 너무 많은 인덱스를 생성하는 것은 성능 저하를 일으킬 수 있기때문에 자주 사용되는 검색 조건 등 꼭 필요한 인덱스만 생성하는 것이 좋습니다.인덱스의 구조B-tree 인덱스Balanced tree의 약자로 균형잡힌 트리 구조입니다. 모든 리프노드가 동일한 깊이에 위치합니다.노드의 삽입 및 삭제 시 특정 규칙에 맞게 재정렬 되어 밸런스를 유지하는 트리입니다.각 노드는 여러 키와 포인터를 가지고 있으며 키는 정렬된 상태로 저장됩니다.검색시 루트 노드부터 시작하여 비교를 통해 적절한 리프노드에 도달합니다.해시 인덱스해시 함수를 사용하여 키 값을 해시코드로 변환하고 이를 기반으로 데이터를 저장하고 검색하는 구조입니다.키와 값의 구조로 되어있기 때문에 해시 인덱스의는 탐색 시간이 O(1) 로 탐색 시간이 빠릅니다.정확하게 일치하는 검색에 대해서는 빠르지만 범위를 검색하는 경우에는 적합하지 않습니다.해시 인덱스는 데이터가 해시코드에 따라 분산되어 있습니다. 그래서 데이터를 정렬된 순서로 접근하는 것이 어렵습니다.데이터들이 정렬되어 있지 않기 때문에 특정 기준보다 크거나 작은 값, 부등호 연에 대해 검색이 적합하지 않습니다." }, { "title" : "인코딩", "category" : "", "tags" : " ", "url" : "/Type-on-Strap/java/2024/06/26/java-encoding.html", "date" : "June 26, 2024", "excerpt" : "인코딩?데이터를 특정 형식으로 변환하여 저장하거나 전송할 수 있도록 하는 과정입니다.인코딩을 통해 데이터를 안전하게 전송할 수 있으며 보다 효과적으로 저장할 수 있습니다.서로 다른 시스템이나 프로그램 간의 데이터 호환성을 유지하며 데이터 전송 중 보안을 강화하고 민감한 정보를 보호합니다.또한 데이터를 압축하여 저장 공간을 절약하거나, 특정 형식에 맞추어 데이터를 저장합니다.데이터를 더 빠르고 안정적으로 전송할 수 있도록 최적화합니다.Mys...", "content" : "인코딩?데이터를 특정 형식으로 변환하여 저장하거나 전송할 수 있도록 하는 과정입니다.인코딩을 통해 데이터를 안전하게 전송할 수 있으며 보다 효과적으로 저장할 수 있습니다.서로 다른 시스템이나 프로그램 간의 데이터 호환성을 유지하며 데이터 전송 중 보안을 강화하고 민감한 정보를 보호합니다.또한 데이터를 압축하여 저장 공간을 절약하거나, 특정 형식에 맞추어 데이터를 저장합니다.데이터를 더 빠르고 안정적으로 전송할 수 있도록 최적화합니다.Mysql 에서 HTML 인코딩HTML 데이터를 데이터베이스에 저장할 때 특수문자나 HTML 태그로 인해 문제가 발생할 수 있습니다.이러한 문제를 해결하기 위해 데이터 인코딩을 사용할 수 있습니다.Mysql에서 HTML 태그를 인코딩하여 데이터베이스에 저장하려면 HTML 특수 문자를 이스케이프 처리하여야 합니다.이를 통해 태그를 안전하게 저장하고 XSS 공격을 방지하는데 도움이 됩니다.방법Apache Commons Text 라이브러리 설정Apache Commons Text 라이브러리 추가 필요PreparedStatementHTML 데이터를 그래도 저장한다.Base64 인코딩바이너리 데이터를 ASCII 문자열로 변환하는 방법입니다. 이를 통해 바이너리 텍스트 형식의 데이터베이스나텍스트 전송 프로토콜을 통해 안전하게 전송하고 저장할 수 있습니다.HTML 데이터를 Base64로 인코딩하면, 특수 문자를 포함하는 HTML 태그를 안전하게 데이터베이스에 저장할 수 있습니다.그 외 종류ASCII 인코딩 (American Standard Code for Information Interchange)가장 오래된 인코딩 방식 중 하나로, 7비트로 표현되며 영문 알파벳, 숫자, 특수 문자를 포함하며, 확장된 형태 8비트의 ASCII도 있습니다.UTF-8 (Unicode Transformation Format - 8-bit)현재 가장 일반적으로 사용되는 문자 인코딩 방식으로 유니코드(Unicode)를 위한 다양한 문자를 다룰 수 있습니다. 가변 길이 문자 인코딩 방식으로, ASCII와 호환되며 다국적 텍스트 처리에 적합합니다.UTF-16유니코드 문자를 16비트 단위로 인코딩하는 방식입니다. 주로 한글, 한자 등 다국적 문자 처리에 사용됩니다.UTF-32유니코드 문자를 32비트 단위로 인코딩하는 방식입니다. 모든 문자를 고정 길이로 표현할 수 있으며, UTF-16과 UTF-8에 비해 메모리 공간을 많이 사용합니다.URL 인코딩 (Percent Encoding)URL에 사용할 수 없는 문자나 특수 문자를 ‘%XX’와 같은 형태로 인코딩하는 방식입니다.HTML 엔티티 인코딩HTML 문서에서 사용할 수 없는 문자나 특수 기호를 대체 문자열(&amp;amp;, &amp;lt;, &amp;gt;, 등)로 변환하는 방식입니다." }, { "title" : "해시", "category" : "", "tags" : " ", "url" : "/Type-on-Strap/java/2024/06/21/algorithm-hash.html", "date" : "June 21, 2024", "excerpt" : "Mysql?데이터를 특정 형식으로 변환하여 저장하거나 전송할 수 있도록 하는 과정입니다.인코딩을 통해 데이터를 안전하게 전송할 수 있으며 보다 효과적으로 저장할 수 있습니다.서로 다른 시스템이나 프로그램 간의 데이터 호환성을 유지하며 데이터 전송 중 보안을 강화하고 민감한 정보를 보호합니다.또한 데이터를 압축하여 저장 공간을 절약하거나, 특정 형식에 맞추어 데이터를 저장합니다.데이터를 더 빠르고 안정적으로 전송할 수 있도록 최적화합니다.H...", "content" : "Mysql?데이터를 특정 형식으로 변환하여 저장하거나 전송할 수 있도록 하는 과정입니다.인코딩을 통해 데이터를 안전하게 전송할 수 있으며 보다 효과적으로 저장할 수 있습니다.서로 다른 시스템이나 프로그램 간의 데이터 호환성을 유지하며 데이터 전송 중 보안을 강화하고 민감한 정보를 보호합니다.또한 데이터를 압축하여 저장 공간을 절약하거나, 특정 형식에 맞추어 데이터를 저장합니다.데이터를 더 빠르고 안정적으로 전송할 수 있도록 최적화합니다.HikariCPHTML 데이터를 데이터베이스에 저장할 때 특수문자나 HTML 태그로 인해 문제가 발생할 수 있습니다.이러한 문제를 해결하기 위해 데이터 인코딩을 사용할 수 있습니다.Mysql에서 HTML 태그를 인코딩하여 데이터베이스에 저장하려면 HTML 특수 문자를 이스케이프 처리하여야 합니다.이를 통해 태그를 안전하게 저장하고 XSS 공격을 방지하는데 도움이 됩니다.방법Apache Commons Text 라이브러리 설정Apache Commons Text 라이브러리 추가 필PreparedStatementHTML 데이터를 그래도 저장한다.Base64 인코딩바이너리 데이터를 ASCII 문자열로 변환하는 방법입니다. 이를 통해 바이너리 텍스트 형식의 데이터베이스나텍스트 전송 프로토콜을 통해 안전하게 전송하고 저장할 수 있습니다.HTML 데이터를 Base64로 인코딩하면, 특수 문자를 포함하는 HTML 태그를 안전하게 데이터베이스에 저장할 수 있습니다.종류ASCII 인코딩 (American Standard Code for Information Interchange)가장 오래된 인코딩 방식 중 하나로, 7비트로 표현되며 영문 알파벳, 숫자, 특수 문자를 포함하며, 확장된 형태 8비트의 ASCII도 있습니다.UTF-8 (Unicode Transformation Format - 8-bit)현재 가장 일반적으로 사용되는 문자 인코딩 방식으로 유니코드(Unicode)를 위한 다양한 문자를 다룰 수 있습니다. 가변 길이 문자 인코딩 방식으로, ASCII와 호환되며 다국적 텍스트 처리에 적합합니다.UTF-16유니코드 문자를 16비트 단위로 인코딩하는 방식입니다. 주로 한글, 한자 등 다국적 문자 처리에 사용됩니다.UTF-32유니코드 문자를 32비트 단위로 인코딩하는 방식입니다. 모든 문자를 고정 길이로 표현할 수 있으며, UTF-16과 UTF-8에 비해 메모리 공간을 많이 사용합니다.Base64 인코딩이진 데이터를 ASCII 문자로만 이루어진 문자열로 변환하는 인코딩 방식입니다. 주로 이메일 첨부 파일 전송이나 데이터 URL 스키마와 같은 컨텍스트에서 사용됩니다.URL 인코딩 (Percent Encoding)URL에 사용할 수 없는 문자나 특수 문자를 ‘%XX’와 같은 형태로 인코딩하는 방식입니다.HTML 엔티티 인코딩HTML 문서에서 사용할 수 없는 문자나 특수 기호를 대체 문자열(&amp;amp;, &amp;lt;, &amp;gt;, 등)로 변환하는 방식입니다." }, { "title" : "Statement 와 PreparedStatement", "category" : "", "tags" : " ", "url" : "/Type-on-Strap/java/2024/06/20/java-PreparedStatement.html", "date" : "June 20, 2024", "excerpt" : "Statement와 PreparedStatement의 차이Statement와 PreparedStatement는 둘 다 JDBC API 에서 제공하는 인터페이스입니다.데이터베이스에서 쿼리를 실행할 때 쿼리를 효율적으로 실행하기 위해서 쿼리 캐싱이라는 작업을 시행합니다.쿼리 캐싱은 쿼리를 파싱하고 최적의 실행계획을 세운 뒤 실행하는 과정입니다.Statement는 쿼리를 실행할 때마다 매번 쿼리를 파싱하고 실행계획을 세우는 과정을 반복하게됩니다...", "content" : "Statement와 PreparedStatement의 차이Statement와 PreparedStatement는 둘 다 JDBC API 에서 제공하는 인터페이스입니다.데이터베이스에서 쿼리를 실행할 때 쿼리를 효율적으로 실행하기 위해서 쿼리 캐싱이라는 작업을 시행합니다.쿼리 캐싱은 쿼리를 파싱하고 최적의 실행계획을 세운 뒤 실행하는 과정입니다.Statement는 쿼리를 실행할 때마다 매번 쿼리를 파싱하고 실행계획을 세우는 과정을 반복하게됩니다.PreparedStatement는 한 번 쿼리가 실행된 후에는 실행계획을 따로 세우지 않고 이전의 실행계획에 파라미터만 변경하여 쿼리를 날립니다.고따라서 처음 실행된 실행계획을 재사용함으로써 성능상에서 좋습니다.보안 측면에서는 Statement는 입력값을 실제 쿼리에 문자열의 형태로 이어 붙입니다.만약 패스워드를 검색하는 쿼리가 있다고 가정을 했을 때, 유저가 패스워드 값을 입력한 후 이어서 세미콜론을 붙이고새로운 select * from User; 쿼리를 작성하면 노출되면 안되는 데이터들이 노출될 위험이 있습니다.따라서 SQL injection 문제가 발생할 위험이 있습니다.PreparedStatement는 입력값을 파라미터로 넘깁니다. 파라미터로 넘어가는 부분을 ? 로 표시하여 바인딩해서 처리합니다.PreparedStatement를 사용할 때 ?(플레이스 홀)를 사용하면, 사용자 입력값이 쿼리에 직접 삽입되지 않고JDBC 드라이버가 자동으로 매개변수 값을 이스케이프 처리합니다.위와 같은 방식(“; select * from User;”)으로 값을 넘기게 되면 SQL injection을 했을 때 문법 에러가 발생하게 됩니다.이렇게 쿼리와 입력 값을 분리해서 처리하기 때문에 입력값은 쿼리의 데이터로만 사용되며 쿼리 구문으로 해석되지 않습니다.이는 SQL 인젝션 공격을 방지하는 데 매우 효과적입니다.PreparedStatement를 사용할 때 주의해야 하는 부분주의사항으로는 PreparedStatement 는 AutoCloseable 를 확장하고 있기 때문에 사용 후에는 리소스를 닫아주어야 합니다.또한 실행 전에 컴파일되기 때문에 sql 문법 오류가 생기는 경우 컴파일 시점에 예외가 발생합니다.PreparedStatement를 사용시 발생할 수 있는 성능 이슈캐싱을 이용하기 때문에 동일한 쿼리를 여러 번 실행할 때 성능을 최적화할 수 있습니다.하지만 Mysql의 경우 좀 다릅니다.쿼리는 정상적으로 오류없이 동작 하지만 내부적으로 캐싱하는 동작을 하지않습니다. 따라서 캐싱을 하기위해서는useServerPrepStmts 와 cachePrepStmts 옵션을 설정하여야 캐싱을 활용할 수 있습니다.또한 매개변수 바인딩시 적절한 데이터 타입(setString, setInt)을 사용하여 성능을 최적화할 수 있으며대랑의 데이터 처리시 addBatch 와 executeBatch 메서드를 사용하여 배치 처리함으로써 성능을 높일 수 있습니다.동일한 Sql 템플릿을 재사용하기 때문에 컴파일 비용을 줄이고 성능을 최적화합니다.SQL Injection 공격을 예방하는 방법SQL injection 공격을 막기 위해서는 매개변수를 이용해 쿼리에 값을 넣어야합니다.PreparedStatement를 사용하면 드라이버가 자동으로 매개변수 값을 이스케이프 처리하여 SQL Injection 공격을 방지합니다.PreparedStatement에서 Batch 처리를 사용하는 경우 장점과 주의할 점Batch의 장점은 대량의 데이터를 한 번에 처리할 수 있습니다.이로써 네트워크 비용을 줄이고 연산 횟수를 감소시킴으로써 성능을 향상시킬 수 있습니다.또한 여러 SQL 문을 하나의 트랜잭션으로 묶어서 실행하기 때문에 데이터의 일관성이 유지됩니다.주의해야할 부분은 대량의 데이터를 처리하기 때문에 메모리 부족 현상이 발생할 수 있다는 것입니다.따라서 적절한 배치 크기를 설정해야합니다.executeBatch() 는 쿼리의 실행 결과를 반환하지 않기 때문에 각 쿼리의 행 수 등의 정보를 확인하려면 추가적인 처리가 필요합니다." }, { "title" : "static", "category" : "", "tags" : " ", "url" : "/Type-on-Strap/java/2024/06/18/java-static.html", "date" : "June 18, 2024", "excerpt" : "static 변수변수나 메서드를 정의할때 사용하는 키워드로, 프로그램의 시작과 동시에 메모리에 로드되며 모든 인스턴스가 공유할 수 있는 변수입니다.모든 객체마다 존재하는 인스턴스 변수와는 다르게 클래스 당 한 개만 존재합니다.인스턴스 변수는 객체마다 개별적인 값을 갖지만 정적 변수는 모든 객체가 동일한 값을 공유합니다.클래스에 종속되어 있으며 객체의 생성과는 무관하게 클래스가 로드될 때 딱 한 번 메모리에 할당됩니다.동일한 데이터를 여러 ...", "content" : "static 변수변수나 메서드를 정의할때 사용하는 키워드로, 프로그램의 시작과 동시에 메모리에 로드되며 모든 인스턴스가 공유할 수 있는 변수입니다.모든 객체마다 존재하는 인스턴스 변수와는 다르게 클래스 당 한 개만 존재합니다.인스턴스 변수는 객체마다 개별적인 값을 갖지만 정적 변수는 모든 객체가 동일한 값을 공유합니다.클래스에 종속되어 있으며 객체의 생성과는 무관하게 클래스가 로드될 때 딱 한 번 메모리에 할당됩니다.동일한 데이터를 여러 인스턴스에 저장할 필요가 없기 때문에 메모리 사용의 중복을 줄일 수 있습니다.JVM의 클래스 영역(Method Area, Metaspace)에 저장됩니다.Static 변수는 클래스가 처음 로드될 때 한 번만 초기화되며, 프로그램 종료 시까지 유지되기 때문에 메모리 할당과 해제에 따른 오버헤드를 줄여줍니다.정적 메서드클래스 수준에서 호출할 수 있는 메서드입니다.해당 클래스의 모든 객체들에 의해서 공유되는 메서드로 객체를 생성하지 않고 클래스 이름으로 직접 호출 합니다또한 정적 메서드는 정적 변수만 사용할 수 있다.그리고 정적 메서드는 특정 객체에 속해있지 않기 때문에 this 키워드를 사용할 수 없는 특징이 있습니다.정적 메서드는 클래스 레벨에서 정의되므로, 메서드 호출 시 객체의 타입이 아닌 클래스의 타입에 따라 호출이 결정됩니다.또한 정적 메서드는 오버라이딩 되지 않습니다.일반적으로 Math 함수와 같이 유틸리티 함수나 독립적인 작업을 수행하는 메서드에서 사용됩니다.static으로 인한 메모리 낭비static는 클래스로드 시점부터 메모리에 로듣됩니다. 따라서 큰 객체를 저장하는 경우 해당 객체가 사용되지 않을 때도 메모리를 차지하게 됩니다.이로 인해 메모리 낭비가 발생할 수 있습니다.static 주의 사항모든 인스턴스에서 공유되기 때문에 여러 스레드에서 동시에 접근할 수 있습니다.동시성 문제가 발생할 수 있기 때문에 스레듣 간에 동기화를 보장하기 위한 추가적인 처리가 필요합니다.이렇게 되면 코드의 의존성이 증가하고 클래스 간의 결합도가 높아질 수 있습니다.Static 변수는 프로그램 종료 시까지 메모리에 유지되기때문에 불필요한 Static 변수 사용은 메모리 사용량을 증가시킬 수 있습니다.Static 변수는 상태를 공유하기 때문에 단위 테스트 시 테스트 간 의존성이 생길 수 있습니다. 따라서 Static 변수의 상태를 테스트 전후에 초기화하거나 가능한 한 사용을 자제해야 합니다.동시성 문제 해결 방법동시성 문제를 해결하는 방법으로는 동기화와 불변성이 있습니다.동기화는 여러 스레드가 동시에 스태틱 변수를 읽고 쓰는 것을 방지하기 위해 사용합니다.방법에는 synchronized 키워드를 사용해서 임계영역을 설정하는 방법이 있습니다. 이렇게 되면 한 번에 하나의 스레드만임계영역에 접근할 수 있게됩니다.불변성불변성은 스태틱 변수를 변경할 수 없도록 만드는 것입니다.. 변수를 final 로 선언하고 불변 객체를 할당합니다.이렇게 되면 동시에 여러 스레드가 해당 변수를 읽을 수는 있지만 변경할 수는 없게됩니다.의존성 주입을 통한 테스트 가능성을 확보하는 방법외부에서 의존 객체를 주입 받아 사용하는 방법이 있습니다.외부 의존성을 mock 객체로 대체 하여 테스트 케이스를 작성할 수 있습니다.static 변수의 사용을 최소화하기 위해 고려해야 할 것의존성 주입을 통하여 외부에서 필요한 객체를 주입 받도록 설계하는 방법이 있습니다.이를 통해 클래스 간의 결합도를 낮추고 유연한 테스트 가능한 코드를 작성할 수 있다또한 하나의 인스턴스를 생성하여 사용하는 싱글톤 패턴을 사용하는 방법입니다. 이를 통해 static 변수 사용을 최소화하고필요한 경우에만 인스턴스를 생성하여 메모리를 절약할 수 있습니다.그리고 스프링과 같은 의존성 주입 프레임워크를 사용하여 의존 관계를 관리하고 필요한 객체를 주입 받는 방법이 있다" }, { "title" : "ArrayList 와 LinkedList", "category" : "", "tags" : " ", "url" : "/Type-on-Strap/alogrithm/2024/06/18/algorithm-arrayList.html", "date" : "June 18, 2024", "excerpt" : "Array배열은 동일한 타입의 데이터들이 순차적으로 메모리에 저장되는 자료구조입니다.인덱스를 통한 직접 접근이 가능하기 때문에 탐색 속도가 빠르다는 장점이 있습니다.하지만 크기가 고정되어 있으며 동적으로 변경할 수 없다는 단점이 있습니다.변경이 필요한 경우 배열을 새로 생성한 후 기존의 요소들을 복사하여야 합니다.ArrayList동적 배열 기반의 리스트 자료구조입니다. 내부적으로 배열을 사용하여 요소를 저장하며요소의 추가나 삭제에 의해 크...", "content" : "Array배열은 동일한 타입의 데이터들이 순차적으로 메모리에 저장되는 자료구조입니다.인덱스를 통한 직접 접근이 가능하기 때문에 탐색 속도가 빠르다는 장점이 있습니다.하지만 크기가 고정되어 있으며 동적으로 변경할 수 없다는 단점이 있습니다.변경이 필요한 경우 배열을 새로 생성한 후 기존의 요소들을 복사하여야 합니다.ArrayList동적 배열 기반의 리스트 자료구조입니다. 내부적으로 배열을 사용하여 요소를 저장하며요소의 추가나 삭제에 의해 크기가 동적으로 조정됩니다.ArrayList는 생성할 때 초기 용량을 설정할 수 있으며 기본으로 10 으로 설정됩니다.내부 배열의 용량이 초과되면 ArrayList 는 자동으로 배열의 크기를 증가시킵니다.이 과정에서 더 큰 새로운 배열을 생성하고, 기존 배열의 요소를 새로운 배열로 복사합니다.(새로운 배열의 크기는 기존 배열 크기의 1.5 또는 2 배)초기 용량을 적절히 설정하면 배열의 크기를 동적으로 늘리는 작업을 줄일 수 있습니다.배열을 늘리는 작업은 새로운 배열을 생성하고 기존 배열의 요소를 복사해야하기 때문에 비용이 많이 듭니다.너무 크게 설정하면 메모리 공간을 낭비하게 되며너무 작게 설정하게 되면 크기 조정 작업이 빈번하게 발생하여 오버헤드가 발생할 수 있습니다.배열을 기반으로 하기 때문에 인덱스를 통한 직접 접근이 가능합니다.LinkedList양방향 연결리스트 기반의 자료구조입니다. 노드로 구성이 되며 배열에 비해 삽입 삭제가 유연합니다.각 노드는 데이터 요소와 두 개의 참조(이전 노드, 다음 노드를 가리키는 포인터)로 이루어져 있습니다. 이러한 노드들이 서로 연결되어 있어서 양방향 연결 리스트(doubly linked list) 구조를 형성합니다.ArrayList와 LinkedList의 요소 추가 및 삭제 성능 차이ArrayList는 요소를 끝에 추가하는 작업이 빈번한 경우에 유리합니다.요소를 중간에 추가하거나 삭제하는 경우 비효율적일 수 있습니다.LinkedList는 요소를 중간에 추가하거나 삭제하는 작업이 빈번한 경우에 유리합니다.하지만 인덱스를 기반으로 요소에 접근하는 작업에는 비효율적입니다.특정 인덱스의 요소에 접근하려면 처음부터 해당 인덱스까지 찾아가야합니다.##ArrayList와 LinkedList의 탐색 속도ArrayList 는 인덱스를 기반으로 요소에 직접 접근하기 때문에 요소에 대한 빠른 접근이 가능합니다.따라서 요소를 탐색하는데 있어 O(1)의 시간이 소요됩니다.LinkedList 특정 인덱스의 요소에 접근하기 위해서는 처음부터 해당 인덱스까지 찾아가야 합니다. 따라서 요소를 탐색하는 데에는 평균적으로 O(n/2)의 시간이 소요됩니다. 최악의 경우 O(n)의 시간이 소요될 수 있습니다.따라서 요소의 탐색이 빈번한 경우에는 ArrayList를 사용하는 것이 효율적이며요소의 추가 및 삭제가 자주 일어나는 경우에는 LinkedList를 사용하는 것이 효율적일 수 있습니다." }, { "title" : "StringBuffer StringBuilder", "category" : "", "tags" : " ", "url" : "/Type-on-Strap/java/2024/06/18/java-StringBuffer-StringBuilder.html", "date" : "June 18, 2024", "excerpt" : "StringBuffer StringBuilderStringBuffer StringBuilder 둘 다 가변 길이 문자열을 처리하는 데 사용되는 클래스입니다.StringBuffer 동기화가 적용되어 있으며 thread-safe 로 멀티 스레드 환경에서 StringBuffer 인스턴스에 접근할 때 안전하게 사용할 수 있습니다.여러 스레드가 동시에 문자열을 수정하는 경우에 사용됩니다. 예를 들어 멀티 스레드 환경에서 공유 문자열을 처리하는 경...", "content" : "StringBuffer StringBuilderStringBuffer StringBuilder 둘 다 가변 길이 문자열을 처리하는 데 사용되는 클래스입니다.StringBuffer 동기화가 적용되어 있으며 thread-safe 로 멀티 스레드 환경에서 StringBuffer 인스턴스에 접근할 때 안전하게 사용할 수 있습니다.여러 스레드가 동시에 문자열을 수정하는 경우에 사용됩니다. 예를 들어 멀티 스레드 환경에서 공유 문자열을 처리하는 경우 사용됩니다.StringBuilder 은 내부적으로 동기화가 적용되어 있지 않습니다. 따라서 멀티 스레드 환경에서 안전하지 않습니다.단일 스레드 환경에서 문자열을 수정할 때 사용되며 성능이 중요하고 thread-safe 가 필요하지 않은 경우 사용하는 것이 좋습니다.StringBuilder 가 단일 스레드 환경에서 사용하기 적합한 이유StringBuilder 가 단일 스레드 환경에 적합한 이유는 동기화로 인한 오버헤드가 없기 때문입니다. 따라서 단일 스레드환경에서 빠릅니다.동기화는 메서드 호출시마다 추가적인 검사와 잠금 획득 및 해제를 필요로 하여 성능을 저하시킬 수 있습니다.따라서 동기화가 없는 StringBuilder 이 더 빠르게 실행됩니다.동기화가 앖는 만큼 StringBuilder 의 메서드들은 더 간단하고 경량화되어 빠른 실행이 가능하며 StringBuffer 보다 더 적은 자원을 소모합니다.불변성불변성은 객체가 한 번 생성된 후로 상태를 바꿀 수 없는 성질을 말합니다.그렇기 때문에 여러 스레드가 동시에 읽어도 안전하며 상태가 변하지 않기 때문에 동기화 처리가 없어도 여러 스레드가 동시에 접근할 수 있습니다.또한 불변 객체는 변경될 일이 없기 때문에 캐싱하여 재사용할 수 있습니다. 따라서 메모리의 사용을 높일 수 있습니다.StringBuilder 는 가변 객체로 불변 객체와 반대되는 개념입니다.StringBuidler 은 내부 상태를 변경할 수 있으며 그 과정에서 내부 배열을 재사용합니다. 새로운 객체를 생성하지 않고 문자열 수정이 가능합니다.따라서 성능 측면에서는 유리할 수 있지만 멀티 스레드 환경에서는 주의해야 합니다.StringBuilder를 멀티 스레드 환경에서 안전하게 사용하려면StringBuilder 를 멀티스레드 환경에서 안전하게 사용하기 위해서는 외부에서 동기화 처리를 해주어야 합니다.동기화 처리 방법에는 synchronized 와 Lock 있습니다.내부적으로 동기화 처리가 되어있는 StringBuffer을 사용하는 방법도 있습니다.ReentrantLock과 Synchronized?ReentrantLock과 Synchronized 둘 다 자바에서 동기화를 제공하지만 사용법과 기능 측면에서 차이가 있습니다.synchronized 키워드는 블록이나 메서드 수준에서 동기화가 가능합니다. 자동으로 락을 획득하고 해제합니다.사용이 간단하며 가독성이 좋습니다.ReentrantLock 클랫스는 명시적으로 락을 획득하고 해제하는 작업이 필요합니다.타임아웃을 지정할 수 있으며 Condition 객체를 사용하여 보다 세밀한 스레드 제어가 가능하며 공정성을 설정할 수 있습니다.복잡한 동기화 요구에 적합하지만 코드가 복잡해질 수 있습니다.ReentrantLock의 await 와 signalReentrantLock 클래스는 Condition 객체를 통 스레드 간에 특정한 조건을 기다리고 신호를 보내는 기능을 제공합니다.해await() 메서드는 현재 스레드를 일시적으로 멈추고 다른 스레드가 signal() 또는 signalAll() 을 호출할 때까지 기다립니다.singnal() 메서드는 하나의 대기 중인 스레드에게만 신호를 보냅니다. 일반적으로 상태가변경되어 하나의 스레만 깨어나야할 때 사용됩니다.공유 자원의 상태가 특정 조건을 만족할 때까지 대기하도록 스레드를 설정하는 경우 사용됩니다.StringBuffer의 동기화StringBuffer 은 내부적으로 동기화 처리가 되어있습니다.따라서 멀티 스레드 환경에서 안전하게 사용이 가능합니다.하지만 모든 메서드 동기화 되며 단일 스레드 환경에서도 불필요한 락을 걸고 해제하기 때문에 오버헤드가 발생할 수 있습니다.복잡 스레드 상호작용 과정에서 데드락이 발생할 수 있으며 synchronized 는 블록과 메서드 수준에서만 사용이 가능하기 때문에 세밀한 제어가 어려울 수 있습니다." }, { "title" : "try-catch 와 try-with-resources", "category" : "", "tags" : " ", "url" : "/Type-on-Strap/java/2024/06/10/java-try-catch-%EC%99%80-try-with-resources.html", "date" : "June 10, 2024", "excerpt" : "try-catch-finallytry-catch-finally 문은 많이 들어보았을 것이다.try-catch-finally 문은 자바7 이전에 나온 예외 처리 구문으로 모든 객체를 포함할 수 있다.사횽 후 반납을 해주어야 하는 자원들은 Closeable 인터페이스를 구현하고 있으며 사용 후 close 메서드를 직접 호출하여 반납해야 한다.자원 반납이 이루어지지 않는 경우 메모리 누수가 생길 수 있으며 다른 프로세스, 스레드에 영향을 줄 수...", "content" : "try-catch-finallytry-catch-finally 문은 많이 들어보았을 것이다.try-catch-finally 문은 자바7 이전에 나온 예외 처리 구문으로 모든 객체를 포함할 수 있다.사횽 후 반납을 해주어야 하는 자원들은 Closeable 인터페이스를 구현하고 있으며 사용 후 close 메서드를 직접 호출하여 반납해야 한다.자원 반납이 이루어지지 않는 경우 메모리 누수가 생길 수 있으며 다른 프로세스, 스레드에 영향을 줄 수 있습니다. 따라서 finally 블록 내에서 자원을 해제하도록 해야합니다.자원을 반납하는 추가적인 코드가 필요하며 실수나 에러로 자원을 반납하지 못하는 경우가 생길 수 있습니다.이러한 문제를 해결하기 위해 자바 7 부터 자원을 자동으로 반납해주는 try-with-resources 문법이 도입되었습니다.try-with-resources ?try-with-resources 는 Java7 부터 도입된 자원 관리를 위한 구문입니다.AutoClosable 인터페이스를 구현하고 있는 자원을 사용 후 자동으로 반납해주는 기능을 제공합니다.이를 사용함으로써 가독성이 좋아지고 예외 발생 시 자원이 안전하게 해제될 수 있습니다.구조try (/*자원 초기화*/) { // 자원을 사용하는 코드} catch (예외 타입 변수) { // 예외 처리 코드}주의할 점은 AutoCloseable 인터페이스를 구현한 객체만이 try 블록내에서 리소스로 사용될 수 있다는 것입니다. 주로 파일, 소켓, 데이터베이스 연결 등에 사용됩니다.Connection.javaCloseable과 AutoCloseable의 관계기존의 Closeable 에 부모 인터페이스 AutoCloseable 를 추가한 형태입니다.Closeable은 AutoCloseable을 확장한 하위 인터페이스입니다. 따라서 Closeable은 AutoCloseable이 제공하는 모든 기능을 포함합니다. 이러한 구조로 기존에 구현된 자원 클래스 모두 try-with-resources 를 사용할 수 있습니다.정리 try-catch 문에서는 예외가 발생할 수 있는 모든 코드가 포함될 수 있으며, 특정 객체 타입에 제한되지 않습니다. try-with-resources 문에서는 AutoCloseable 를 구현한 객체만을 사용할 수 있으며, 구문을 사용하면 리소스 누수를 방지할 수 있어 자원 관리에 매우 유용합니다." }, { "title" : "JDBC과 커넥션", "category" : "", "tags" : " ", "url" : "/Type-on-Strap/java/2024/06/10/java-JDBC.html", "date" : "June 10, 2024", "excerpt" : "JDBCJava Database Connectivity 으로 자바 애플리케이션과 데이터베이스 사이의 통신을가능하게 하는 API 입니다.특징 Java 언어 기반으로 개발되어 있기 때문에 플랫폼에 독립적입니다. Java 언어가 실행될 수 있는 모든 플랫폼엣서동일한 방식으로 데이터베이스를 접속하고 관리할 수 있음을 의미합니다. 데이터베이스에 접속하기 위한 절차를 단순화할 수 있습니다.데이터베이스 연결, 쿼리 실행, 결과 처...", "content" : "JDBCJava Database Connectivity 으로 자바 애플리케이션과 데이터베이스 사이의 통신을가능하게 하는 API 입니다.특징 Java 언어 기반으로 개발되어 있기 때문에 플랫폼에 독립적입니다. Java 언어가 실행될 수 있는 모든 플랫폼엣서동일한 방식으로 데이터베이스를 접속하고 관리할 수 있음을 의미합니다. 데이터베이스에 접속하기 위한 절차를 단순화할 수 있습니다.데이터베이스 연결, 쿼리 실행, 결과 처리의 과정을 통합적으로 지원합니다. 다양한 데이터베이스 관리시스템(DBMS)와 호환됩니다. SQL을 사용해서 데이터베이스와 상호작용합니다. 트랜잭션을 지원하여 데이터베이스 작업의 일관성을 유지할 수 있으며하나의 트랜잭션으로 묶어 실행하거나 롤백할 수 있습니다. 커넥션 풀데이터 베이스를 연결하려면 네트워크 연결, 인증, 권한 확인 등여러 단계를 거쳐야 하기 때문에 상당히 많은 리소스를 소모합니다.이러한 문제를 해결하기 위해 커넥션 풀이 사용됩니다.커넥션 풀은 미리 일정 수의 연결을 생성해두고 필요할 때마다 연결을 재사용하는 방식입니다.이를 통해서 연결을 생성하는데 드는 비용을 절감ㅁ하고 애플리케이션의 성능을 향상시킬 수 있습니다.매번 데이터 베이스 연결을 생성하는 것에는 많은 시간과 리소스를 소모하기 때문에 고성능을 요구하는 애플리케이션에서는커넥션 풀의 사용이 필수적입니다.동작프로그램이 시작하는 시점에서 연결이 미리 생성이 됩니다. 이 연겯을 풀에 저장해두고 연결이 필요할 때마다커넥션 풀에 미리 생성해둔 연결을 가져와서 사용합니다.사용이 끝난 연결은 다시 풀에 반환되어 재사용됩니다.이 과정에서 데이터베이스 연결의 생성과 소멸이 최소화되기 때문에 비용을 절감할 수 있으며 재사용하기 때문에 효율적입니다.풀의 크기가 너무 작은 경우 사용 가능한 연결이 부족해져 성능 저하가 발생할 수 있으며 반대로 풀의 크기가 너무 큰 경우불필요하게 많은 리소스를 소모하게 됩니다." }, { "title" : "JDBC 구현", "category" : "", "tags" : " ", "url" : "/Type-on-Strap/java/2024/06/10/java-JDBC-%EA%B5%AC%ED%98%84.html", "date" : "June 10, 2024", "excerpt" : "JDBCManager JDBC를 사용해 Mysql 데이터베이스와의 연결을 관리하는 매니저 클래스Mysql 데이터베이슷 접속에 필요한 정보(사용자이름, 암호, URL) 를 상수로 정의 private static final String USERNAME = &amp;quot;root&amp;quot;; // 데이터베이스 사용자 이름 private static final String PASSWORD = &amp;quot;XXXXXXXX&amp;quot;; /...", "content" : "JDBCManager JDBC를 사용해 Mysql 데이터베이스와의 연결을 관리하는 매니저 클래스Mysql 데이터베이슷 접속에 필요한 정보(사용자이름, 암호, URL) 를 상수로 정의 private static final String USERNAME = &quot;root&quot;; // 데이터베이스 사용자 이름 private static final String PASSWORD = &quot;XXXXXXXX&quot;; // 데이터베이스 암호 private static final String URL = &quot;jdbc:mysql://localhost/XXX?useSSL=false&quot;; JDBC URL: localhost에 설치된 MySQL 서버의 XXX데이터베이스에 접속 useSSL=false : SSL 을 사용하지 않음드 이외 추가 접속 옵션 설클래스가 로드될 때 JDBC 드라이버 로드static { // 클래스가 로드될때 드라이버가 항상 로드되도록 보장하기 위해 정적으로 설정함(필수X) try { // Mysql JDBC 드라이버 클래스 로드 Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;); } catch (ClassNotFoundException e) { e.printStackTrace(); throw new RuntimeException(&quot;Failed to load JDBC driver&quot;); }}데이터베이스 연결 public static Connection getConnection() throws SQLException { return DriverManager.getConnection(URL, USERNAME, PASSWORD); } getConnection() 메서드 : 데이터베이스 연결을 생성하고 반환 DriverManager.getConnection(URL, USERNAME, PASSWORD)접속정보를 이용해 데이터베이스 연결 요청을 하고 이를 Connection 객체로 반환합니다.JdbcManager.java 전체코드연결을 했으니까 이제 SQL 쿼리를 실행하는 Java 코드 보겠습니다.예시로 주문을 insert 하는 쿼리입니다.insertOrder메서드public class ItemDao { public int insertOrder(String itemId, int quantity, Order order) { String sql = &quot;INSERT INTO orders (order_id, item_id, stock_count) VALUES (?, ?, ?)&quot;; try (Connection conn = JdbcManager.getConnection(); PreparedStatement pstmt = conn.prepareStatement(sql)) { // Order 객체에서 필요한 정보를 가져와서 SQL 문에 설정합니다. // 주문 insert pstmt.setString(1, order.getOrderId()); pstmt.setString(2, itemId); pstmt.setInt(3, quantity); int count = pstmt.executeUpdate(); // 코드 생략 } catch (SQLException e) { e.printStackTrace(); // 예외 처리 및 롤백 로직이 필요할 수 있음 } return 0; }} 쿼리문 작성 : String sql = “~~~”?은 PreparedStatement의 매개변수 위치 지정자입니다. Connection conn = JdbcManager.getConnection(); JdbcManager 클래스의 getConnection() 메서드를 사용하여 데이터베이스와 연결합니다. PreparedStatement pstPreparedStatement pstmt = conn.prepareStatement(sql)mt = conn.prepareStatement(sql)준비된 문장을 사용하여 SQL 쿼리를 실행할 PreparedStatement 객체를 생성합니다. pstmt.setString(1, order.getOrderId());Sql 쿼리의 첫 번째 매개변수에 값을 바인딩합니다. pstmt.executeUpdate()sql 쿼리를 실행하고 데이터베이스에 데이터를 삽입합니다. executeUpdate()와 executeQuery()하나 기억할 점은 각각 데이터 조작 및 조회 작업에 맞게 sql문 실행 메서드를 사용해야 합니다.executeUpdate() 메서드는 insert, update, delete 와 같은 DML 쿼리를 실행할 때 사용됩니다.반환값으로 영향을 받은 레코드, 행의 개수를 반환합니다.executeQuery() 메서드는 select 쿼리와 같이 데이터베이스 에서 데이터를 조회할 때 사용합니다.ResultSet 객체를 반환하며, ResultSet 는 쿼리에 대한 결과 집합을 나타냅니다.?하지만 이런 형식으로 select, insert, update 메서드를 구현한다며?커넥션을 획득하고, 매개변수를 매핑하고, 쿼리를 실행하는 동작들이 중복될 것이다.중복이 너무 많아~~~중복을 없애보자!!public abstract class BaseDao&amp;lt;T&amp;gt; { public &amp;lt;T&amp;gt; T execute(String sql, ResultSetHandler&amp;lt;T&amp;gt; handler, Object...params) { try (Connection conn = JdbcManager.getConnection(); PreparedStatement pstmt = conn.prepareStatement(sql)) { for (int i=0; i&amp;lt;params.length; i++) { pstmt.setObject(i+1, params[i]); } ResultSet rs = pstmt.executeQuery(); return handler.handle(rs); } catch (SQLException e) { e.printStackTrace(); } return null; }}제네릭 타입 T를 받는 추상 클래스로 다양한 유형의 데이터를 처리할 수 있다. execute() 는 제네릭 메서드로 데이터베이스 쿼리를 실행하고 그 결과를 처리기 위한 메서드이다. sql : 실행할 쿼리문입니다. handler : ResultSet 을 처리할 ResultSetHandler 인터페이스 구현체입니다. params : 쿼리에 바인딩할 매개변수입니다. 사용 예시public class ItemDao extends BaseDao { public Item selectOne(String id) { String sql = &quot;SELECT * FROM item WHERE item_id = ?&quot;; return (Item) execute(sql, rs -&amp;gt; { if (rs.next()) { Item item = new Item(); item.setId(rs.getString(&quot;item_id&quot;)); item.setName(rs.getString(&quot;item_nm&quot;)); item.setPrice(rs.getInt(&quot;price&quot;)); item.setStockCount(rs.getInt(&quot;stock_count&quot;)); return item; } else { return null; } }, id); }}@FunctionalInterfacepublic interface ResultSetHandler&amp;lt;T&amp;gt; { T handle(ResultSet rs) throws SQLException;;}" }, { "title" : "Dark Mode", "category" : "", "tags" : " Katex, Mermaid, Markdown", "url" : "/Type-on-Strap/demo/2021/04/27/dark-mode.html", "date" : "April 27, 2021", "excerpt" : "More colors with less light. Click the half-moon most top-right button to turn the lights ON/OFF.Here is a bit of everything, so you can check how the theme look, have fun! 👌HeadersLevel 2Level 3Level 4Level 5Level 6Headers with linksLevel 2Level ...", "content" : "More colors with less light. Click the half-moon most top-right button to turn the lights ON/OFF.Here is a bit of everything, so you can check how the theme look, have fun! 👌HeadersLevel 2Level 3Level 4Level 5Level 6Headers with linksLevel 2Level 3Level 4Level 5Level 6Code highlightMode specific code highlighting themes. Kramdown which is responsible for the color highlighting may be more limited than your IDE.#!/usr/bin/env python&quot;&quot;&quot;Test file for syntax&quot;&quot;&quot;# TODO: Use dark modefrom sys import osdef foo(bar): try: print(bar) except NameError: print(&quot;Variable bar is not defined&quot;)class Bar(object): def __init__(self): foo(1) self.octal = &#39;\\04&#39; self.text = &quot;&quot;&quot;Example \\t\\n&quot;&quot;&quot; def __exit__(self, *args): print(&#39;exit\\u1111\\xFF&#39;) pass @staticmethod def example(): assert (1.0 and 2L) or True return { &quot;example&quot;: [(1,), (r&#39;raw&#39;, u&#39;unicode&#39;)]}Tables hex dec oct 0 0 0 5 5 5 A 10 12 F 16 20 F5 21 25 KaTeXSome KaTeX diagrams to check in dark mode:\\[\\begin{CD}A @&amp;gt;a&amp;gt;&amp;gt; B \\\\@VbVV @AAcA \\\\C @= D\\end{CD}\\]\\[\\utilde{AB}\\]Mermaidflowchart TB c1--&amp;gt;a2 subgraph one a1--&amp;gt;a2 end subgraph two b1--&amp;gt;b2 end subgraph three c1--&amp;gt;c2 end" }, { "title" : "Tech Stuff example", "category" : "", "tags" : " Highlight, Markdown", "url" : "/Type-on-Strap/2019/11/02/Tech-stuff-example.html", "date" : "November 2, 2019", "excerpt" : "Let’s demo some code snippet, with some mermaid diagrams.Because if you put some code in your blog, you would at least make it: Searchable Good-lookingSearch on codeSearch should be working even for complicated escape symbols.sed -i &amp;#39;s/\\&amp;quo...", "content" : "Let’s demo some code snippet, with some mermaid diagrams.Because if you put some code in your blog, you would at least make it: Searchable Good-lookingSearch on codeSearch should be working even for complicated escape symbols.sed -i &#39;s/\\&quot;hostname\\&quot;\\:.*$/\\&quot;hostname\\&quot;\\: \\&quot;&#39;$IPADDR&#39;\\&quot;\\,/g&#39; open-falcon/agent/config/cfg.jsonOr try searching for partial of a command, like this article should be returned when looking for “find grep”find /etc -type f -exec cat &#39;{}&#39; \\; | tr -c &#39;.[:digit:]&#39; &#39;\\n&#39; | grep &#39;^[^.][^.]*\\.[^.][^.]*\\.[^.][^.]*\\.[^.][^.]*$&#39;Code highlighting examplesBecause you might put code in your blog post, and you want to make sure it will look good in here. Plus that the searchfunction will still be working!XMLExample from W3C&amp;lt;part number=&quot;1976&quot;&amp;gt; &amp;lt;name&amp;gt;Windscreen Wiper&amp;lt;/name&amp;gt; &amp;lt;description&amp;gt;The Windscreen wiper automatically removes rain from your windscreen, if it should happen to splash there. It has a rubber &amp;lt;ref part=&quot;1977&quot;&amp;gt;blade&amp;lt;/ref&amp;gt; which can be ordered separately if you need to replace it. &amp;lt;/description&amp;gt;&amp;lt;/part&amp;gt;Javajava exampleimport java.util.*;@Examplepublic class Demo { private static final String CONSTANT = &quot;String&quot;; private Object o; /** * Creates a new demo. * @param o The object to demonstrate. */ public Demo(Object o) { this.o = o !== null ? o : new Object(); String s = CONSTANT + &quot;Other example of text&quot;; int i = 123 - 33 % 11; } public static void main(String[] args) { Demo demo = new Demo(); System.out.println(demo.o.toString()) }}Javascript/** * Does a thing */function helloWorld(param1, param2) { const example = `hello ${param1}` var something = { key: &quot;value&quot;, number: 1 }; // Do something if (2.0 % 2 == something) { console.log(&#39;Hello, world!&#39;); } else { return null; } // TODO comment}JSON{ &quot;animals&quot;: { &quot;tiger&quot;: { &quot;name&quot;: &quot;tiger&quot;, &quot;images&quot;: [&quot;🐯&quot;, &quot;🐅&quot;, &quot;⻁&quot;] }, &quot;turtle&quot;: { &quot;age&quot;: 126, &quot;image&quot;: &quot;🐢&quot; }, &quot;unicorn&quot;: { &quot;doesExist&quot;: true, &quot;image&quot;: &quot;🦄&quot; } }}Pythonimport osdef some_function(param_one=&quot;&quot;, param_two=0): r&#39;&#39;&#39;A docstring&#39;&#39;&#39; if param_one &amp;gt; param_two: # interesting print(&quot;Greater&quot;) return (param_two - param_one + 1 + 0b10) or Noneclass SomeClass: &quot;&quot;&quot; dunno what I am doing &quot;&quot;&quot; def __init__(self): passYAMLYou can also render some yaml, like this _config.yml:# Welcome to Jekyll!## This config file is meant for settings that affect your whole blog, values# which you are expected to set up once and rarely edit after that. If you find# yourself editing this file very often, consider using Jekyll&#39;s data files# feature for the data you need to update frequently.## This file, &quot;_config.yml&quot; is *NOT* reloaded automatically when you use# &#39;bundle exec jekyll serve&#39;. If you change this file, please restart the server process.# Site settings# These are used to personalize your new site. If you look in the HTML files,# you will see them accessed via Type on Strap, , and so on.# You can create any custom variable you would like, and they will be accessible# in the templates via .# SITE CONFIGURATIONbaseurl: &quot;/Type-on-Strap&quot;url: &quot;https://sylhare.github.io&quot;# THEME-SPECIFIC CONFIGURATIONtitle: Type on Strap # site&#39;s titledescription: &quot;A website with blog posts and pages&quot; # used by search enginesavatar: assets/img/triangle.png # Empty for no avatar in navbarfavicon: assets/favicon.ico # Icon displayed in the tabremote_theme: sylhare/Type-on-Strap # If using as a remote_theme in github" }, { "title" : "Customize the Favicon", "category" : "", "tags" : " favicon", "url" : "/Type-on-Strap/blogging/tutorial/2019/08/11/customize-the-favicon.html", "date" : "August 11, 2019", "excerpt" : "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons.Generate the faviconPrepare a square image (PNG, ...", "content" : "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons.Generate the faviconPrepare a square image (PNG, JPG, or SVG) with a size of 512x512 or more, and then go to the online tool Real Favicon Generator and click the button Select your Favicon image to upload your image file.In the next step, the webpage will show all usage scenarios. You can keep the default options, scroll to the bottom of the page, and click the button Generate your Favicons and HTML code to generate the favicon.Download &amp;amp; ReplaceDownload the generated package, unzip and delete the following two from the extracted files: browserconfig.xml site.webmanifestAnd then copy the remaining image files (.PNG and .ICO) to cover the original files in the directory assets/img/favicons/ of your Jekyll site. If your Jekyll site doesn’t have this directory yet, just create one.The following table will help you understand the changes to the favicon files: File(s) From Online Tool From Chirpy *.PNG ✓ ✗ *.ICO ✓ ✗ ✓ means keep, ✗ means delete.The next time you build the site, the favicon will be replaced with a customized edition." }, { "title" : "Getting Started", "category" : "", "tags" : " getting started", "url" : "/Type-on-Strap/blogging/tutorial/2019/08/09/getting-started.html", "date" : "August 9, 2019", "excerpt" : "PrerequisitesFollow the instructions in the Jekyll Docs to complete the installation of the basic environment. Git also needs to be installed.InstallationCreating a New SiteThere are two ways to create a new repository for this theme: Using the C...", "content" : "PrerequisitesFollow the instructions in the Jekyll Docs to complete the installation of the basic environment. Git also needs to be installed.InstallationCreating a New SiteThere are two ways to create a new repository for this theme: Using the Chirpy Starter — Easy to upgrade, isolates irrelevant project files so you can focus on writing. GitHub Fork — Convenient for custom development, but difficult to upgrade. Unless you are familiar with Jekyll and are determined to tweak or contribute to this project, this approach is not recommended.Option 1. Using the Chirpy StarterSign in to GitHub and browse to Chirpy Starter, click the button Use this template &amp;gt; Create a new repository, and name the new repository USERNAME.github.io, where USERNAME represents your GitHub username.Option 2. GitHub ForkSign in to GitHub to fork Chirpy, and then rename it to USERNAME.github.io (USERNAME means your username).Next, clone the repository to your local machine, make sure it has Node.js installed, then go to the root directory of the repo and run the following command:$ bash tools/init If you don’t want to deploy your site on GitHub Pages, append option --no-gh at the end of the above command.The above command will: Check out the code to the latest tag (to ensure the stability of your site: as the code for the default branch is under development). Remove non-essential sample files and take care of GitHub-related files. Build CSS/JS assets files and then make them tracked by Git. Automatically create a new commit to save the changes above.Installing DependenciesBefore running local server for the first time, go to the root directory of your site and run:$ bundleUsageConfigurationUpdate the variables of _config.yml as needed. Some of them are typical options: url avatar timezone langSocial Contact OptionsSocial contact options are displayed at the bottom of the sidebar. You can turn on/off the specified contacts in file _data/contact.yml.Customizing StylesheetIf you need to customize the stylesheet, copy the theme’s assets/css/jekyll-theme-chirpy.scss to the same path on your Jekyll site, and then add the custom style at the end of it.Starting with version 6.2.0, if you want to overwrite the SASS variables defined in _sass/addon/variables.scss, copy the main sass file _sass/main.scss into the _sass directory in your site’s source, then create a new file _sass/variables-hook.scss and assign new value.Customing Static AssetsStatic assets configuration was introduced in version 5.1.0. The CDN of the static assets is defined by file _data/origin/cors.yml, and you can replace some of them according to the network conditions in the region where your website is published.Also, if you’d like to self-host the static assets, please refer to the chirpy-static-assets.Running Local ServerYou may want to preview the site contents before publishing, so just run it by:$ bundle exec jekyll sAfter a few seconds, the local service will be published at http://127.0.0.1:4000.DeploymentBefore the deployment begins, check out the file _config.yml and make sure the url is configured correctly. Furthermore, if you prefer the project site and don’t use a custom domain, or you want to visit your website with a base URL on a web server other than GitHub Pages, remember to change the baseurl to your project name that starts with a slash, e.g, /project-name.Now you can choose ONE of the following methods to deploy your Jekyll site.Deploy by Using GitHub ActionsThere are a few things to get ready for. If you’re on the GitHub Free plan, keep your site repository public. If you have committed Gemfile.lock to the repository, and your local machine is not running Linux, go to the root of your site and update the platform list of the lock-file: $ bundle lock --add-platform x86_64-linux Next, configure the Pages service. Browse to your repository on GitHub. Select the tab Settings, then click Pages in the left navigation bar. Then, in the Source section (under Build and deployment), select GitHub Actions from the dropdown menu. Push any commits to GitHub to trigger the Actions workflow. In the Actions tab of your repository, you should see the workflow Build and Deploy running. Once the build is complete and successful, the site will be deployed automatically. At this point, you can go to the URL indicated by GitHub to access your site.Manually Build and DeployOn self-hosted servers, you cannot enjoy the convenience of GitHub Actions. Therefore, you should build the site on your local machine and then upload the site files to the server.Go to the root of the source project, and build your site as follows:$ JEKYLL_ENV=production bundle exec jekyll bUnless you specified the output path, the generated site files will be placed in folder _site of the project’s root directory. Now you should upload those files to the target server." }, { "title" : "Sample post", "category" : "", "tags" : " A Tag, Katex", "url" : "/Type-on-Strap/2019/06/30/sample-post.html", "date" : "June 30, 2019", "excerpt" : "Consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit. Donec et mollis dolor. Praesent et diam eget libero egestas mattis sit amet vitae augue. Nam tincid...", "content" : "Consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit. Donec et mollis dolor. Praesent et diam eget libero egestas mattis sit amet vitae augue. Nam tincidunt congue enim, ut porta lorem lacinia consectetur. Donec ut libero sed arcu vehicula ultricies a non tortor. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ut gravida lorem. Consectetur adipiscing elit Donec a diam lectus Sed sit amet ipsum maurisUt turpis felis, pulvinar a semper sed, adipiscing id dolor. Pellentesque auctor nisi id magna consequat sagittis. Curabitur dapibus enim sit amet elit pharetra tincidunt feugiat nisl imperdiet. Ut convallis libero in urna ultrices accumsan. Donec sed odio eros. Donec viverra mi quis quam pulvinar at malesuada arcu rhoncus. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. In rutrum accumsan ultricies. Mauris vitae nisi at sem facilisis semper ac in est.Nunc diam velit, adipiscing ut tristique vitae, sagittis vel odio. Maecenas convallis ullamcorper ultricies. Curabitur ornare, ligula semper consectetur sagittis, nisi diam iaculis velit, id fringilla sem nunc vel mi. Nam dictum, odio nec pretium volutpat, arcu ante placerat erat, non tristique elit urna et turpis. Quisque mi metus, ornare sit amet fermentum et, tincidunt et orci. Fusce eget orci a orci congue vestibulum. Ut dolor diam, elementum et vestibulum eu, porttitor vel elit. Curabitur venenatis pulvinar tellus gravida ornare. Sed et erat faucibus nunc euismod ultricies ut id justo. Nullam cursus suscipit nisi, et ultrices justo sodales nec. Fusce venenatis facilisis lectus ac semper. Aliquam at massa ipsum. Quisque bibendum purus convallis nulla ultrices ultricies. Nullam aliquam, mi eu aliquam tincidunt, purus velit laoreet tortor, viverra pretium nisi quam vitae mi. Fusce vel volutpat elit. Nam sagittis nisi dui. Suspendisse lectus leo, consectetur in tempor sit amet, placerat quis nequeEtiam luctus porttitor lorem, sed suscipit est rutrum non. Curabitur lobortis nisl a enim congue semper. Aenean commodo ultrices imperdiet. Vestibulum ut justo vel sapien venenatis tincidunt.\\[\\Theta \\ne \\Gamma\\]Phasellus eget dolor sit amet ipsum dapibus condimentum vitae quis lectus. Aliquam ut massa in turpis dapibus convallis. Praesent elit lacus, vestibulum at malesuada et, ornare et est. Ut augue nunc, sodales ut euismod non, adipiscing vitae orci1. Mauris ut placerat justo. Mauris in ultricies enim. Quisque nec est eleifend nulla ultrices egestas quis ut quam. Donec sollicitudin lectus a mauris pulvinar id aliquam urna cursus. Cras quis ligula sem, vel elementum mi. Phasellus non ullamcorper urna. John Smith, A Title About Citations &amp;#8617;" }, { "title" : "Color Post", "category" : "", "tags" : " Test, Color", "url" : "/Type-on-Strap/example/2019/05/18/color-post.html", "date" : "May 18, 2019", "excerpt" : "What a colorful post!This is an idea that came from xukimseven/HardCandy-Jekyll looking at this cheerful and colorful theme, I wanted to enable something similar for Type-on-Strap.You can go fork and star HardCandy-Jekyll too! 😉How does it work?Ba...", "content" : "What a colorful post!This is an idea that came from xukimseven/HardCandy-Jekyll looking at this cheerful and colorful theme, I wanted to enable something similar for Type-on-Strap.You can go fork and star HardCandy-Jekyll too! 😉How does it work?Basically you need to add just one thing, the color:---layout: posttitle: Color Postcolor: brown---It can either be a html color like brown (which look like red to me). Or with the rgb:---layout: posttitle: Color Postcolor: rgb(165,42,42)---The background used is lineart.png from xukimseven you can edit it in the config file. If you want another one, put it in /assets/img as well. ⚠️ It’s a bit hacking the css in the post.html" }, { "title" : "Feature images", "category" : "", "tags" : " Test, Image", "url" : "/Type-on-Strap/example/2018/10/29/feature-images.html", "date" : "October 29, 2018", "excerpt" : "Hopefully you will find enough information about how to set images in your blog here.This is an example of a post which includes a feature image specified in the front matter of the post. The feature image spans the full-width of the page, and is ...", "content" : "Hopefully you will find enough information about how to set images in your blog here.This is an example of a post which includes a feature image specified in the front matter of the post. The feature image spans the full-width of the page, and is shown with the title on permalink pages:feature-img: &quot;assets/img/feature-img/desk-messy.jpeg&quot;thumbnail: &quot;assets/img/thumbnails/feature-img/desk-messy.jpeg&quot; You can also use a thumbnail, a smaller version of the same image to improve loading of the page.The thumbnail will also be used when you share your article on other platform (linkedin, whatsapp, facebook, …). And now it is working You can also add images aligned in your post using the aligner include.Make sure to separate all of the image path from in a string separated with ,.It by default look into assets/img/ so give the path from there, example:{% include aligner.html images=&quot;pexels/book-glass.jpeg,triangle.png&quot; %} Here you have two images side by side, but you can set more and set the amount per columns (by specifying the number of columns or let it be automatic using &quot;auto&quot;):{% include aligner.html images=&quot;portfolio/cabin.png,portfolio/cake.png,portfolio/circus.png&quot; column=3 %} it also works with only one images, it is made to display it smaller than normally.However you can just use the Markdown way of doing it to get the image normal sized and centered.# Markdown way (bigger)![Travel]({{ &quot;/assets/img/pexels/computer.jpeg&quot; | relative_url}})# Aligner with only One (50% of width){% include aligner.html images=&quot;pexels/computer.jpeg&quot; %}" }, { "title" : "Bootstrap", "category" : "", "tags" : " Test", "url" : "/Type-on-Strap/demo/2017/09/17/Use-Bootstrap.html", "date" : "September 17, 2017", "excerpt" : "This theme is compatible with Bootstrap if you choose to use it in your pages or posts.Here is a little demo with a code snippet, look at the source to see how the HTML and markdown get tangled.Use bootstrapAdd some custom Bootstrap in the custom ...", "content" : "This theme is compatible with Bootstrap if you choose to use it in your pages or posts.Here is a little demo with a code snippet, look at the source to see how the HTML and markdown get tangled.Use bootstrapAdd some custom Bootstrap in the custom layout!Snippet exampleIf you are new to Bootstrap you can always check the documentation.Here is an example from startbootstrap.com. Project One Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam viverra euismod odio, gravida pellentesque urna varius vitae. Project Two Lorem ipsum dolor sit amet, consectetur adipisicing elit. Fugit aliquam aperiam nulla perferendis dolor nobis numquam, rem expedita, aliquid optio, alias illum eaque. Non magni, voluptates quae, necessitatibus unde temporibus. Project Three Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam viverra euismod odio, gravida pellentesque urna varius vitae. Project Four Lorem ipsum dolor sit amet, consectetur adipisicing elit. Fugit aliquam aperiam nulla perferendis dolor nobis numquam, rem expedita, aliquid optio, alias illum eaque. Non magni, voluptates quae, necessitatibus unde temporibus. Project Five Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam viverra euismod odio, gravida pellentesque urna varius vitae. Project Six Lorem ipsum dolor sit amet, consectetur adipisicing elit. Fugit aliquam aperiam nulla perferendis dolor nobis numquam, rem expedita, aliquid optio, alias illum eaque. Non magni, voluptates quae, necessitatibus unde temporibus. Mix it with MarkdownAll the above was custom HTML with Bootstrap.You can also mix it up with some markdown.You can use the bootstrap’s build in javascript API to control your event.Here is a code snippet for the documentation:$(&#39;#myModal&#39;).on(&#39;show.bs.modal&#39;, function (e) { if (!data) return e.preventDefault() // stops modal from being shown})That’s just for demo though, you would need to properly integrate your javascript in your page.Usually you would put any custom javascript script in the assets folder under js and reference it in your page from there.So try it out using the bootstrap: true flag! 😉" }, { "title" : "Mermaid Chart", "category" : "", "tags" : " Mermaid", "url" : "/Type-on-Strap/2016/12/03/Mermaid.html", "date" : "December 3, 2016", "excerpt" : "MermaidDiagrams with mermaid, make sure it is enabled in the _config.yml.Here is a simple example:&amp;amp;lt;!-- To generate a diagram --&amp;amp;gt;&amp;amp;lt;div class=&amp;quot;mermaid&amp;quot;&amp;amp;gt;sequenceDiagram Alice-&amp;amp;gt;&amp;amp;gt;John: Hello John, h...", "content" : "MermaidDiagrams with mermaid, make sure it is enabled in the _config.yml.Here is a simple example:&amp;lt;!-- To generate a diagram --&amp;gt;&amp;lt;div class=&quot;mermaid&quot;&amp;gt;sequenceDiagram Alice-&amp;gt;&amp;gt;John: Hello John, how are you? John--&amp;gt;&amp;gt;Alice: Great!&amp;lt;/div&amp;gt; 💡 Now render also work with the GitHub markdown highlight.```mermaidsequenceDiagram Alice-&amp;gt;&amp;gt;John: Hello John, how are you? John--&amp;gt;&amp;gt;Alice: Great!```That will be rendered into this: You can also go with more complex features and diagrams from the documentation,and try it out with the live editor.SequenceDiagramsequenceDiagram participant Alice participant Bob Alice-&amp;gt;&amp;gt;John: Hello John, how are you? loop Healthcheck John-&amp;gt;&amp;gt;John: Fight against hypochondria end Note right of John: Rational thoughts prevail! John--&amp;gt;&amp;gt;Alice: Great! John-&amp;gt;&amp;gt;Bob: How about you? Bob--&amp;gt;&amp;gt;John: Jolly good!Flowflowchart TD A[Christmas] --&amp;gt;|Get money| B(Go shopping) B --&amp;gt; C{Let me think} C --&amp;gt;|One| D[Laptop] D ~~~ E C --&amp;gt;|Two| E[iPhone] C --&amp;gt;|Three| F[fa:fa-car Car] %% GrinchClassclassDiagram Animal &amp;lt;|-- Duck Animal &amp;lt;|-- Fish Animal &amp;lt;|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() }StatestateDiagram-v2 [*] --&amp;gt; Still Still --&amp;gt; [*] Still --&amp;gt; Moving Moving --&amp;gt; Still Moving --&amp;gt; Crash Crash --&amp;gt; [*]ERerDiagram CUSTOMER }|..|{ DELIVERY-ADDRESS : has CUSTOMER ||--o{ ORDER : places CUSTOMER ||--o{ INVOICE : &quot;liable for&quot; DELIVERY-ADDRESS ||--o{ ORDER : receives INVOICE ||--|{ ORDER : covers ORDER ||--|{ ORDER-ITEM : includes PRODUCT-CATEGORY ||--|{ PRODUCT : contains PRODUCT ||--o{ ORDER-ITEM : &quot;ordered in&quot;Ganttgantt title A Gantt Diagram dateFormat YYYY-MM-DD section Section A task :a1, 2014-01-01, 30d Another task :after a1 , 20d section Another Task in sec :2014-01-12 , 12d another task : 24dUser Journeyjourney title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 3: MeGitgitGraph commit commit branch develop checkout develop commit commit checkout main merge develop commit commitPiepie title Pets adopted by volunteers &quot;Dogs&quot; : 386 &quot;Cats&quot; : 85 &quot;Rats&quot; : 15Mindmapmindmap root((mindmap)) Origins Long history ::icon(fa fa-book) Popularisation British popular psychology author Tony Buzan Research On effectivness&amp;lt;br/&amp;gt;and features On Automatic creation Uses Creative techniques Strategic planning Argument mapping Tools Pen and paper MermaidQuadrantChartquadrantChart title Reach and engagement of campaigns x-axis Low Reach --&amp;gt; High Reach y-axis Low Engagement --&amp;gt; High Engagement quadrant-1 We should expand quadrant-2 Need to promote quadrant-3 Re-evaluate quadrant-4 May be improved Campaign A: [0.3, 0.6] Campaign B: [0.45, 0.23] Campaign C: [0.57, 0.69] Campaign D: [0.78, 0.34] Campaign E: [0.40, 0.34] Campaign F: [0.35, 0.78]XYChart xychart-beta title &quot;Sales Revenue&quot; x-axis [jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec] y-axis &quot;Revenue (in $)&quot; 4000 --&amp;gt; 11000 bar [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000] line [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]" }, { "title" : "Markdown and HTML", "category" : "", "tags" : " Katex, Markdown", "url" : "/Type-on-Strap/syntax/2014/11/28/markdown-and-html.html", "date" : "November 28, 2014", "excerpt" : "Jekyll supports the use of Markdown with inline HTML tags which makes it easier to quickly write posts with Jekyll, without having to worry too much about text formatting. A sample of the formatting follows.Table of content TOC You need to put t...", "content" : "Jekyll supports the use of Markdown with inline HTML tags which makes it easier to quickly write posts with Jekyll, without having to worry too much about text formatting. A sample of the formatting follows.Table of content TOC You need to put this at the beginning of the page where you want the table of content to be displayed* TOC{:toc}It will then render the markdown and html titles (lines that begins with # or using the &amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt; tages)TitleSubtitleTables have also been extended from Markdown: First Header Second Header Content Cell Content Cell Content Cell Content Cell Here’s an example of an image, which is included using Markdown:This is another example of list: list of things Sub list of Other things with numbers And many more Sub sub list can go on … and on … and on ! That’s it. Other subtitleHighlighting for code in Jekyll is done using Base16 or Rouge. This theme makes use of Rouge by default.// count to tenfor (var i = 1; i &amp;lt;= 10; i++) { console.log(i);}// count to twentyvar j = 0;while (j &amp;lt; 20) { j++; console.log(j);}MathType on Strap uses KaTeX to display maths. Equations such as \\(S_n = a \\times \\frac{1-r^n}{1-r}\\) can be displayed inline.Alternatively, they can be shown on a new line:\\[f(x) = \\int \\frac{2x^2+4x+6}{x-2}\\]And in your markdown file:$$ f(x) = \\int \\frac{2x^2+4x+6}{x-2} $$Expandable contentClick on the expandable content to display it: Click here! Now you see meAnd in your markdown file:&amp;lt;details&amp;gt; &amp;lt;summary&amp;gt;Click here!&amp;lt;/summary&amp;gt; Now you see me&amp;lt;/details&amp;gt;" }, { "title" : "What&#39;s your title", "category" : "", "tags" : " Test, Image", "url" : "/Type-on-Strap/2014/11/27/whats-your-title.html", "date" : "November 27, 2014", "excerpt" : "This is an example of a post which includes a feature image that has atext, where you don’t want to redisplay the title.Mind your image size in order for the text to be displayed where you want it to.The only limit is your imagination.Here is how ...", "content" : "This is an example of a post which includes a feature image that has atext, where you don’t want to redisplay the title.Mind your image size in order for the text to be displayed where you want it to.The only limit is your imagination.Here is how the yaml looks inside the post:title: What&#39;s your titlehide_title: truefeature-img: assets/img/feature-img/story.jpegauthor: mhagnumdwtags: [Test, Lorem]You may wonder, why is there a title when you are not actually displaying it. Well that’s due to some jekyll limitation: You can’t set the title to the empty stringThe title is used elsewhere than inside the post, for example in the blog page that list this post.An empty title would break those pages and possibly prevents jekyll to render your blog." }, { "title" : "The Real Lorem Ipsum", "category" : "", "tags" : " Image, Color", "url" : "/Type-on-Strap/demo/2014/11/26/lorem-ipsum.html", "date" : "November 26, 2014", "excerpt" : "Lorem Ipsumfrom “de Finibus Bonorum et Malorum” written by Cicero in 45 BC. Find out more on lipsum.com. And if you like colors, check out the http color trends from w3schools.The standard Lorem Ipsum passage (since 1500s)“Lorem ipsum dolor sit am...", "content" : "Lorem Ipsumfrom “de Finibus Bonorum et Malorum” written by Cicero in 45 BC. Find out more on lipsum.com. And if you like colors, check out the http color trends from w3schools.The standard Lorem Ipsum passage (since 1500s)“Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.”Section 1.10.32Latin“Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?”Translation by H. Rackham (1914)“But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure?”Section 1.10.33Latin“At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.”Translation by H. Rackham (1914)“On the other hand, we denounce with righteous indignation and dislike men who are so beguiled and demoralized by the charms of pleasure of the moment, so blinded by desire, that they cannot foresee the pain and trouble that are bound to ensue; and equal blame belongs to those who fail in their duty through weakness of will, which is the same as saying through shrinking from toil and pain. These cases are perfectly simple and easy to distinguish. In a free hour, when our power of choice is untrammelled and when nothing prevents our being able to do what we like best, every pleasure is to be welcomed and every pain avoided. But in certain circumstances and owing to the claims of duty or the obligations of business it will frequently occur that pleasures have to be repudiated and annoyances accepted. The wise man therefore always holds in these matters to this principle of selection: he rejects pleasures to secure other greater pleasures, or else he endures pains to avoid worse pains.”" }, { "title" : "Markup: Syntax Highlighting", "category" : "", "tags" : " Highlight, Markdown", "url" : "/Type-on-Strap/syntax/2014/08/08/Markup-Syntax-Highlighting.html", "date" : "August 8, 2014", "excerpt" : "Syntax highlighting1 is a feature that displays source code. This feature facilitates writing in a structured language such as a programming language or a markup language as it makes import things visually distinct.GFM Code BlocksGitHub Flavored M...", "content" : "Syntax highlighting1 is a feature that displays source code. This feature facilitates writing in a structured language such as a programming language or a markup language as it makes import things visually distinct.GFM Code BlocksGitHub Flavored Markdown fenced code blocks are supported. To modify styling and highlight colors edit /_sass/syntax.scss.#container { float: left; margin: 0 -240px 0 0; width: 100%;}1234567.highlight { margin: 0; padding: 1em; font-family: $monospace; font-size: $type-size-7; line-height: 1.8;}&amp;lt;nav class=&quot;pagination&quot; role=&quot;navigation&quot;&amp;gt; {% if page.previous %} &amp;lt;a href=&quot;{{ site.url }}{{ page.previous.url }}&quot; class=&quot;btn&quot; title=&quot;{{ page.previous.title }}&quot;&amp;gt;Previous article&amp;lt;/a&amp;gt; {% endif %} {% if page.next %} &amp;lt;a href=&quot;{{ site.url }}{{ page.next.url }}&quot; class=&quot;btn&quot; title=&quot;{{ page.next.title }}&quot;&amp;gt;Next article&amp;lt;/a&amp;gt; {% endif %}&amp;lt;/nav&amp;gt;&amp;lt;!-- /.pagination --&amp;gt;module Jekyll class TagIndex &amp;lt; Page def initialize(site, base, dir, tag) @site = site @base = base @dir = dir @name = &#39;index.html&#39; self.process(@name) self.read_yaml(File.join(base, &#39;_layouts&#39;), &#39;tag_index.html&#39;) self.data[&#39;tag&#39;] = tag tag_title_prefix = site.config[&#39;tag_title_prefix&#39;] || &#39;Tagged: &#39; tag_title_suffix = site.config[&#39;tag_title_suffix&#39;] || &#39;&amp;amp;#8211;&#39; self.data[&#39;title&#39;] = &quot;#{tag_title_prefix}#{tag}&quot; self.data[&#39;description&#39;] = &quot;An archive of posts tagged #{tag}.&quot; end endendCode Blocks in ListsIndentation matters. Be sure the indent of the code block aligns with the first non-space character after the list item marker (e.g., 1.). Usually this will mean indenting 3 spaces instead of 4. Do step 1. Now do this: def print_hi(name) puts &quot;Hi, #{name}&quot;endprint_hi(&#39;Tom&#39;)#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT. Now you can do this.GitHub Gist EmbedAn example of a Gist embed below:Here is how it looks like: &amp;lt;script src=&quot;https://gist.github.com/sylhare/dad7ed1ef3d13614c77c4ebadf8a11c3.js&quot;&amp;gt; &amp;lt;/script&amp;gt; Michael’s Rose, Minimal Mistakes &amp;#8617;" }, { "title" : "Blogging with title ", "category" : "", "tags" : " Test, Image", "url" : "/Type-on-Strap/2013/10/18/blogging-with-title.html", "date" : "October 18, 2013", "excerpt" : "I am a BIG titleThis is a very tiny tiny post with less than 250 letters.", "content" : "I am a BIG titleThis is a very tiny tiny post with less than 250 letters." } ,  { "title" : "About", "category" : "", "tags" : " Page", "url" : "/Type-on-Strap/about/", "date" : "N/A", "excerpt" : "Type on Strap is based on Type Theme, a free and open-source theme for Jekyll, licensed under the MIT License.Head over to the theme’s documentation for much more information about Type on Strap or to install this theme on your own Jekyll site.Thi...", "content" : "Type on Strap is based on Type Theme, a free and open-source theme for Jekyll, licensed under the MIT License.Head over to the theme’s documentation for much more information about Type on Strap or to install this theme on your own Jekyll site.This file is an example of a page in Jekyll, that automatically shows up in the header navigation, you can delete or modify this file freely." },      { "title" : "Portfolio", "category" : "", "tags" : " Page", "url" : "/Type-on-Strap/portfolio/", "date" : "N/A", "excerpt" : "", "content" : "" },   { "title" : "Tags", "category" : "", "tags" : " ", "url" : "/Type-on-Strap/tags/", "date" : "N/A", "excerpt" : "", "content" : "" },       { } , { "title" : "Ninja", "category" : "", "tags" : " Lorem", "url" : "/Type-on-Strap/portfolio/ninja", "date" : "April 8, 2014", "excerpt" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia...", "content" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?" }, { "title" : "Creative", "category" : "", "tags" : " Ipsum", "url" : "/Type-on-Strap/portfolio/safe", "date" : "August 16, 2014", "excerpt" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia...", "content" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?Use this area of the page to describe your project. The icon above is part of a free icon set by Flat Icons." }, { "title" : "Circus", "category" : "", "tags" : " Ipsum", "url" : "/Type-on-Strap/portfolio/circus", "date" : "September 1, 2014", "excerpt" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia...", "content" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?" }, { "title" : "Tower of Hanoi", "category" : "", "tags" : " ", "url" : "/Type-on-Strap/portfolio/hanoi", "date" : "September 1, 2014", "excerpt" : "The tower of Hanoi…Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ip...", "content" : "The tower of Hanoi…Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?" }, { "title" : "Tic tac toe", "category" : "", "tags" : " ", "url" : "/Type-on-Strap/portfolio/tictactoe", "date" : "September 1, 2014", "excerpt" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia...", "content" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?Use this area of the page to describe your project. The icon above is part of a free icon set by Flat Icons." }, { "title" : "Cake", "category" : "", "tags" : " Lorem, Ipsum", "url" : "/Type-on-Strap/portfolio/cake", "date" : "September 27, 2015", "excerpt" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia...", "content" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?Use this area of the page to describe your project. The icon above is part of a free icon set by Flat Icons." }, { "title" : "Jekyll", "category" : "", "tags" : " ", "url" : "/Type-on-Strap/portfolio/jekyllblog", "date" : "May 26, 2017", "excerpt" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia...", "content" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?" }, { "title" : "Lorem Ipsum", "category" : "", "tags" : " ", "url" : "/Type-on-Strap/portfolio/submarine", "date" : "September 3, 2017", "excerpt" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia...", "content" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?Use this area of the page to describe your project. The icon above is part of a free icon set by Flat Icons." }, { "title" : "Github", "category" : "", "tags" : " Lorem", "url" : "/Type-on-Strap/portfolio/gitlecture", "date" : "October 20, 2017", "excerpt" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia...", "content" : "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?" } , {} ]
